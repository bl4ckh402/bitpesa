#!/usr/bin/env node

/**
 * Lightning Integration Verification Script
 * 
 * This script checks if all Lightning Network integration components 
 * are properly set up and configured.
 */

const fs = require('fs');
const path = require('path');

console.log('üîç BitPesa Lightning Integration Verification');
console.log('===========================================\n');

const requiredFiles = [
  // Service and hooks
  'fe/lib/services/lightning-service.ts',
  'fe/lib/hooks/useLightningDeposit.ts',
  'fe/lib/utils/qr-code.ts',
  'fe/lib/utils/toast-utils.ts',
  
  // Components
  'fe/components/lightning-deposit.tsx',
  'fe/components/deposit-modal.tsx',
  
  // API endpoints
  'fe/app/api/webhooks/speed/route.ts',
  
  // Configuration
  '.env.example',
  '.env.local.example',
  
  // Documentation
  'LIGHTNING_INTEGRATION_GUIDE.md',
  'LIGHTNING_TESTING_GUIDE.md',
  
  // Scripts
  'scripts/demo-lightning.js',
];

const optionalFiles = [
  '.env.local',
  'fe/.env.local',
];

let missingFiles = [];
let presentFiles = [];

console.log('üìÇ Checking required files...');
requiredFiles.forEach(file => {
  const filePath = path.join(process.cwd(), file);
  if (fs.existsSync(filePath)) {
    presentFiles.push(file);
    console.log(`‚úÖ ${file}`);
  } else {
    missingFiles.push(file);
    console.log(`‚ùå ${file} (MISSING)`);
  }
});

console.log('\nüìÇ Checking optional files...');
optionalFiles.forEach(file => {
  const filePath = path.join(process.cwd(), file);
  if (fs.existsSync(filePath)) {
    console.log(`‚úÖ ${file} (configured)`);
  } else {
    console.log(`‚ö†Ô∏è  ${file} (not configured - copy from .env.example)`);
  }
});

// Check package.json dependencies
console.log('\nüì¶ Checking dependencies...');
const packageJsonPath = path.join(process.cwd(), 'fe/package.json');
if (fs.existsSync(packageJsonPath)) {
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
  const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies };
  
  const requiredDeps = ['qrcode', '@types/qrcode', 'wagmi', 'viem', 'framer-motion'];
  
  requiredDeps.forEach(dep => {
    if (dependencies[dep]) {
      console.log(`‚úÖ ${dep}: ${dependencies[dep]}`);
    } else {
      console.log(`‚ùå ${dep}: NOT FOUND`);
    }
  });
} else {
  console.log('‚ùå fe/package.json not found');
}

// Check environment variables structure
console.log('\nüîß Checking environment configuration...');
const envExamplePath = path.join(process.cwd(), '.env.example');
if (fs.existsSync(envExamplePath)) {
  const envContent = fs.readFileSync(envExamplePath, 'utf8');
  const requiredEnvVars = [
    'NEXT_PUBLIC_SPEED_API_KEY',
    'NEXT_PUBLIC_SPEED_API_URL', 
    'SPEED_WEBHOOK_SECRET'
  ];
  
  requiredEnvVars.forEach(envVar => {
    if (envContent.includes(envVar)) {
      console.log(`‚úÖ ${envVar} configured in .env.example`);
    } else {
      console.log(`‚ùå ${envVar} missing from .env.example`);
    }
  });
} else {
  console.log('‚ùå .env.example not found');
}

// Summary
console.log('\nüìä Summary');
console.log('===========');
console.log(`‚úÖ Required files present: ${presentFiles.length}/${requiredFiles.length}`);
if (missingFiles.length > 0) {
  console.log(`‚ùå Missing files: ${missingFiles.length}`);
  console.log('Missing files:', missingFiles.join(', '));
}

console.log('\nüöÄ Next Steps');
console.log('=============');

if (missingFiles.length === 0) {
  console.log('‚úÖ All Lightning integration files are present!');
  console.log('\nTo complete setup:');
  console.log('1. Copy .env.local.example to .env.local');
  console.log('2. Update .env.local with your Speed API credentials');
  console.log('3. Run: cd fe && npm install');
  console.log('4. Run: cd fe && npm run dev');
  console.log('5. Test Lightning deposit in the UI');
  console.log('6. Use scripts/demo-lightning.js for API testing');
} else {
  console.log('‚ùå Some required files are missing.');
  console.log('Please ensure all Lightning integration components are created.');
}

console.log('\nüìö Documentation');
console.log('=================');
console.log('‚Ä¢ Integration Guide: LIGHTNING_INTEGRATION_GUIDE.md');
console.log('‚Ä¢ Testing Guide: LIGHTNING_TESTING_GUIDE.md');
console.log('‚Ä¢ Demo Script: scripts/demo-lightning.js');

console.log('\nüîß Troubleshooting');
console.log('==================');
console.log('‚Ä¢ Check browser console for JavaScript errors');
console.log('‚Ä¢ Verify Speed API credentials are correct');
console.log('‚Ä¢ Ensure webhook endpoint is publicly accessible');
console.log('‚Ä¢ Test with small amounts first (0.001 WBTC)');

console.log('\nüéØ Test Checklist');
console.log('=================');
console.log('‚ñ° Environment variables configured');
console.log('‚ñ° Dependencies installed (npm install)');
console.log('‚ñ° Development server running (npm run dev)');
console.log('‚ñ° Wallet connected');
console.log('‚ñ° Lightning wallet ready');
console.log('‚ñ° Create Lightning invoice');
console.log('‚ñ° Pay Lightning invoice'); 
console.log('‚ñ° Verify on-chain deposit');
console.log('‚ñ° Test error scenarios');

console.log('\n‚ú® Happy testing! ‚ö°');
