{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts-ccip/contracts/interfaces/IRouterClient.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport {Client} from \"../libraries/Client.sol\";\n\ninterface IRouterClient {\n  error UnsupportedDestinationChain(uint64 destChainSelector);\n  error InsufficientFeeTokenAmount();\n  error InvalidMsgValue();\n\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\n  /// @param destChainSelector The chain to check.\n  /// @return supported is true if it is supported, false if not.\n  function isChainSupported(\n    uint64 destChainSelector\n  ) external view returns (bool supported);\n\n  /// @param destinationChainSelector The destination chainSelector.\n  /// @param message The cross-chain CCIP message including data and/or tokens.\n  /// @return fee returns execution fee for the message.\n  /// delivery to destination chain, denominated in the feeToken specified in the message.\n  /// @dev Reverts with appropriate reason upon invalid message.\n  function getFee(\n    uint64 destinationChainSelector,\n    Client.EVM2AnyMessage memory message\n  ) external view returns (uint256 fee);\n\n  /// @notice Request a message to be sent to the destination chain.\n  /// @param destinationChainSelector The destination chain ID.\n  /// @param message The cross-chain CCIP message including data and/or tokens.\n  /// @return messageId The message ID.\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept.\n  /// the overpayment with no refund.\n  /// @dev Reverts with appropriate reason upon invalid message.\n  function ccipSend(\n    uint64 destinationChainSelector,\n    Client.EVM2AnyMessage calldata message\n  ) external payable returns (bytes32);\n}\n"
    },
    "@chainlink/contracts-ccip/contracts/libraries/Client.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// End consumer library.\nlibrary Client {\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\n  struct EVMTokenAmount {\n    address token; // token address on the local chain.\n    uint256 amount; // Amount of tokens.\n  }\n\n  struct Any2EVMMessage {\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\n    uint64 sourceChainSelector; // Source chain selector.\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\n    bytes data; // payload sent in original message.\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\n  }\n\n  // If extraArgs is empty bytes, the default is 200k gas limit.\n  struct EVM2AnyMessage {\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains.\n    bytes data; // Data payload.\n    EVMTokenAmount[] tokenAmounts; // Token transfers.\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV2).\n  }\n\n  // Tag to indicate only a gas limit. Only usable for EVM as destination chain.\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\n\n  struct EVMExtraArgsV1 {\n    uint256 gasLimit;\n  }\n\n  function _argsToBytes(\n    EVMExtraArgsV1 memory extraArgs\n  ) internal pure returns (bytes memory bts) {\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\n  }\n\n  // Tag to indicate a gas limit (or dest chain equivalent processing units) and Out Of Order Execution. This tag is\n  // available for multiple chain families. If there is no chain family specific tag, this is the default available\n  // for a chain.\n  // Note: not available for Solana VM based chains.\n  bytes4 public constant GENERIC_EXTRA_ARGS_V2_TAG = 0x181dcf10;\n\n  /// @param gasLimit: gas limit for the callback on the destination chain.\n  /// @param allowOutOfOrderExecution: if true, it indicates that the message can be executed in any order relative to\n  /// other messages from the same sender. This value's default varies by chain. On some chains, a particular value is\n  /// enforced, meaning if the expected value is not set, the message request will revert.\n  /// @dev Fully compatible with the previously existing EVMExtraArgsV2.\n  struct GenericExtraArgsV2 {\n    uint256 gasLimit;\n    bool allowOutOfOrderExecution;\n  }\n\n  // Extra args tag for chains that use the Solana VM.\n  bytes4 public constant SVM_EXTRA_ARGS_V1_TAG = 0x1f3b3aba;\n\n  struct SVMExtraArgsV1 {\n    uint32 computeUnits;\n    uint64 accountIsWritableBitmap;\n    bool allowOutOfOrderExecution;\n    bytes32 tokenReceiver;\n    // Additional accounts needed for execution of CCIP receiver. Must be empty if message.receiver is zero.\n    // Token transfer related accounts are specified in the token pool lookup table on SVM.\n    bytes32[] accounts;\n  }\n\n  /// @dev The maximum number of accounts that can be passed in SVMExtraArgs.\n  uint256 public constant SVM_EXTRA_ARGS_MAX_ACCOUNTS = 64;\n\n  /// @dev The expected static payload size of a token transfer when Borsh encoded and submitted to SVM.\n  /// TokenPool extra data and offchain data sizes are dynamic, and should be accounted for separately.\n  uint256 public constant SVM_TOKEN_TRANSFER_DATA_OVERHEAD = (4 + 32) // source_pool\n    + 32 // token_address\n    + 4 // gas_amount\n    + 4 // extra_data overhead\n    + 32 // amount\n    + 32 // size of the token lookup table account\n    + 32 // token-related accounts in the lookup table, over-estimated to 32, typically between 11 - 13\n    + 32 // token account belonging to the token receiver, e.g ATA, not included in the token lookup table\n    + 32 // per-chain token pool config, not included in the token lookup table\n    + 32 // per-chain token billing config, not always included in the token lookup table\n    + 32; // OffRamp pool signer PDA, not included in the token lookup table\n\n  /// @dev Number of overhead accounts needed for message execution on SVM.\n  /// @dev These are message.receiver, and the OffRamp Signer PDA specific to the receiver.\n  uint256 public constant SVM_MESSAGING_ACCOUNTS_OVERHEAD = 2;\n\n  /// @dev The size of each SVM account address in bytes.\n  uint256 public constant SVM_ACCOUNT_BYTE_SIZE = 32;\n\n  function _argsToBytes(\n    GenericExtraArgsV2 memory extraArgs\n  ) internal pure returns (bytes memory bts) {\n    return abi.encodeWithSelector(GENERIC_EXTRA_ARGS_V2_TAG, extraArgs);\n  }\n\n  function _svmArgsToBytes(\n    SVMExtraArgsV1 memory extraArgs\n  ) internal pure returns (bytes memory bts) {\n    return abi.encodeWithSelector(SVM_EXTRA_ARGS_V1_TAG, extraArgs);\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/automation/AutomationBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract AutomationBase {\n  error OnlySimulatedBackend();\n\n  /**\n   * @notice method that allows it to be simulated via eth_call by checking that\n   * the sender is the zero address.\n   */\n  function _preventExecution() internal view {\n    // solhint-disable-next-line avoid-tx-origin\n    if (tx.origin != address(0) && tx.origin != address(0x1111111111111111111111111111111111111111)) {\n      revert OnlySimulatedBackend();\n    }\n  }\n\n  /**\n   * @notice modifier that allows it to be simulated via eth_call by checking\n   * that the sender is the zero address.\n   */\n  modifier cannotExecute() {\n    _preventExecution();\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {AutomationBase} from \"./AutomationBase.sol\";\nimport {AutomationCompatibleInterface} from \"./interfaces/AutomationCompatibleInterface.sol\";\n\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\n"
    },
    "@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  function approve(address spender, uint256 value) external returns (bool success);\n\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  function decimals() external view returns (uint8 decimalPlaces);\n\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n\n  function name() external view returns (string memory tokenName);\n\n  function symbol() external view returns (string memory tokenSymbol);\n\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n\n  function transfer(address to, uint256 value) external returns (bool success);\n\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\n\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1363.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/BitPesaLending.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\";\r\n\r\n/**\r\n * @title BitPesa WBTC Lending Platform\r\n * @dev A DeFi platform that allows users to deposit WBTC as collateral and take loans in stablecoins\r\n * Integrates Chainlink Price Feeds for accurate collateral valuation\r\n * Uses Chainlink Automation for liquidation checks\r\n */\r\ncontract BitPesaLending is\r\n    ReentrancyGuard,\r\n    Ownable,\r\n    AutomationCompatibleInterface\r\n{\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Token addresses\r\n    address public wbtcAddress;\r\n    address public stablecoinAddress;\r\n\r\n    // Chainlink price feed for BTC/USD\r\n    AggregatorV3Interface public btcUsdPriceFeed;\r\n\r\n    // Loan parameters\r\n    uint256 public constant COLLATERAL_RATIO_DENOMINATOR = 100;\r\n    uint256 public requiredCollateralRatio = 150; // 150% collateralization required\r\n    uint256 public liquidationThreshold = 125; // Liquidate if CR drops below 125%\r\n    uint256 public borrowFeePercent = 1; // 1% fee on borrowed amount\r\n    uint256 public maxLoanDurationDays = 30;\r\n\r\n    // Interest rate parameters (APR in basis points, 1% = 100)\r\n    uint256 public interestRatePerYear = 500; // 5% APR\r\n\r\n    struct Loan {\r\n        uint256 id;\r\n        address borrower;\r\n        uint256 collateralAmount; // In WBTC\r\n        uint256 loanAmount; // In stablecoin\r\n        uint256 startTimestamp;\r\n        uint256 endTimestamp;\r\n        uint256 interestRate; // In basis points (1% = 100)\r\n        bool active;\r\n        bool liquidated;\r\n        uint256 lastInterestCalculation;\r\n    }\r\n\r\n    // Mapping from loan ID to loan details\r\n    mapping(uint256 => Loan) public loans;\r\n    uint256 public nextLoanId;\r\n\r\n    // User balances in WBTC\r\n    mapping(address => uint256) public userCollateralBalance;\r\n\r\n    // Total platform stats\r\n    uint256 public totalCollateralLocked;\r\n    uint256 public totalLoansOutstanding;\r\n    uint256 public platformStablecoinBalance;\r\n    uint256 public protocolFeeBalance;\r\n\r\n    // Events\r\n    event Deposit(address indexed user, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 amount);\r\n    event LoanCreated(\r\n        uint256 indexed loanId,\r\n        address indexed borrower,\r\n        uint256 collateralAmount,\r\n        uint256 loanAmount\r\n    );\r\n    event LoanRepaid(\r\n        uint256 indexed loanId,\r\n        address indexed borrower,\r\n        uint256 repaidAmount,\r\n        uint256 interestPaid\r\n    );\r\n    event LoanLiquidated(\r\n        uint256 indexed loanId,\r\n        address indexed borrower,\r\n        address indexed liquidator,\r\n        uint256 collateralLiquidated\r\n    );\r\n    event CollateralRatioUpdated(uint256 oldRatio, uint256 newRatio);\r\n\r\n    /**\r\n     * @param _wbtcAddress Address of the WBTC token\r\n     * @param _stablecoinAddress Address of the stablecoin used for loans\r\n     * @param _btcUsdPriceFeed Address of the Chainlink BTC/USD price feed\r\n     */\r\n    constructor(\r\n        address _wbtcAddress,\r\n        address _stablecoinAddress,\r\n        address _btcUsdPriceFeed\r\n    ) Ownable(msg.sender) {\r\n        wbtcAddress = _wbtcAddress;\r\n        stablecoinAddress = _stablecoinAddress;\r\n        btcUsdPriceFeed = AggregatorV3Interface(_btcUsdPriceFeed);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the latest BTC/USD price from Chainlink\r\n     * @return price in USD with 8 decimals\r\n     */\r\n    function getBtcUsdPrice() public view returns (uint256) {\r\n        (, int256 price, , , ) = btcUsdPriceFeed.latestRoundData();\r\n        require(price > 0, \"Invalid price\");\r\n        return uint256(price);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate the USD value of WBTC\r\n     * @param wbtcAmount Amount of WBTC (in wei)\r\n     * @return USD value with 8 decimal places\r\n     */\r\n    function calculateUsdValue(\r\n        uint256 wbtcAmount\r\n    ) public view returns (uint256) {\r\n        uint256 btcPrice = getBtcUsdPrice();\r\n        // Convert WBTC amount (with 8 decimals) to USD value\r\n        // 1 WBTC = 10^8 sats\r\n        return (wbtcAmount * btcPrice) / 1e8;\r\n    }\r\n\r\n    /**\r\n     * @dev Deposit WBTC as collateral\r\n     * @param amount Amount of WBTC to deposit (in wei)\r\n     */\r\n    function deposit(uint256 amount) external nonReentrant {\r\n        require(amount > 0, \"Amount must be greater than zero\");\r\n\r\n        // Transfer WBTC from user to contract\r\n        IERC20(wbtcAddress).safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        // Update user balance and total collateral\r\n        userCollateralBalance[msg.sender] += amount;\r\n        totalCollateralLocked += amount;\r\n\r\n        emit Deposit(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw WBTC collateral if not being used for active loans\r\n     * @param amount Amount of WBTC to withdraw (in wei)\r\n     */\r\n    function withdraw(uint256 amount) external nonReentrant {\r\n        require(amount > 0, \"Amount must be greater than zero\");\r\n        require(\r\n            userCollateralBalance[msg.sender] >= amount,\r\n            \"Insufficient balance\"\r\n        );\r\n\r\n        // Calculate available collateral (not being used for loans)\r\n        uint256 usedCollateral = 0;\r\n        for (uint256 i = 0; i < nextLoanId; i++) {\r\n            if (loans[i].borrower == msg.sender && loans[i].active) {\r\n                usedCollateral += loans[i].collateralAmount;\r\n            }\r\n        }\r\n\r\n        require(\r\n            userCollateralBalance[msg.sender] - usedCollateral >= amount,\r\n            \"Collateral is locked in active loans\"\r\n        );\r\n\r\n        // Update balances\r\n        userCollateralBalance[msg.sender] -= amount;\r\n        totalCollateralLocked -= amount;\r\n\r\n        // Transfer WBTC back to user\r\n        IERC20(wbtcAddress).safeTransfer(msg.sender, amount);\r\n\r\n        emit Withdraw(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Create a new loan backed by WBTC collateral\r\n     * @param collateralAmount Amount of WBTC to use as collateral (in wei)\r\n     * @param loanAmount Amount of stablecoin to borrow\r\n     * @param durationDays Duration of the loan in days\r\n     */\r\n    function createLoan(\r\n        uint256 collateralAmount,\r\n        uint256 loanAmount,\r\n        uint256 durationDays\r\n    ) external nonReentrant {\r\n        require(collateralAmount > 0, \"Collateral must be greater than zero\");\r\n        require(loanAmount > 0, \"Loan amount must be greater than zero\");\r\n        require(\r\n            durationDays > 0 && durationDays <= maxLoanDurationDays,\r\n            \"Invalid loan duration\"\r\n        );\r\n        require(\r\n            userCollateralBalance[msg.sender] >= collateralAmount,\r\n            \"Insufficient collateral balance\"\r\n        );\r\n\r\n        // Calculate USD value of collateral\r\n        uint256 collateralValueUsd = calculateUsdValue(collateralAmount);\r\n\r\n        // Check if loan amount is within allowable limits based on collateral ratio\r\n        uint256 maxLoanAmountUsd = (collateralValueUsd *\r\n            COLLATERAL_RATIO_DENOMINATOR) / requiredCollateralRatio;\r\n        require(\r\n            loanAmount <= maxLoanAmountUsd,\r\n            \"Loan amount exceeds collateral ratio\"\r\n        );\r\n\r\n        // Check if platform has enough stablecoin liquidity\r\n        require(\r\n            platformStablecoinBalance >= loanAmount,\r\n            \"Insufficient platform liquidity\"\r\n        );\r\n\r\n        // Calculate loan fee\r\n        uint256 fee = (loanAmount * borrowFeePercent) / 100;\r\n        uint256 loanAmountAfterFee = loanAmount - fee;\r\n\r\n        // Create the loan\r\n        uint256 loanId = nextLoanId++;\r\n        loans[loanId] = Loan({\r\n            id: loanId,\r\n            borrower: msg.sender,\r\n            collateralAmount: collateralAmount,\r\n            loanAmount: loanAmount,\r\n            startTimestamp: block.timestamp,\r\n            endTimestamp: block.timestamp + (durationDays * 1 days),\r\n            interestRate: interestRatePerYear,\r\n            active: true,\r\n            liquidated: false,\r\n            lastInterestCalculation: block.timestamp\r\n        });\r\n\r\n        // Update platform stats\r\n        platformStablecoinBalance -= loanAmount;\r\n        totalLoansOutstanding += loanAmount;\r\n        protocolFeeBalance += fee;\r\n\r\n        // Transfer stablecoin to borrower\r\n        IERC20(stablecoinAddress).safeTransfer(msg.sender, loanAmountAfterFee);\r\n\r\n        emit LoanCreated(\r\n            loanId,\r\n            msg.sender,\r\n            collateralAmount,\r\n            loanAmountAfterFee\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate interest accrued on a loan\r\n     * @param loanId ID of the loan\r\n     * @return Interest amount in stablecoin\r\n     */\r\n    function calculateInterest(uint256 loanId) public view returns (uint256) {\r\n        Loan storage loan = loans[loanId];\r\n        require(loan.active, \"Loan is not active\");\r\n\r\n        uint256 timeElapsed = block.timestamp - loan.lastInterestCalculation;\r\n\r\n        // Calculate interest: principal * rate * time\r\n        // (loanAmount * interestRatePerYear * timeElapsed) / (100 * 365 days)\r\n        return\r\n            (loan.loanAmount * loan.interestRate * timeElapsed) /\r\n            (10000 * 365 days);\r\n    }\r\n\r\n    /**\r\n     * @dev Repay a loan and retrieve collateral\r\n     * @param loanId ID of the loan to repay\r\n     * @param repaymentAmount Amount of stablecoin to repay\r\n     */\r\n    function repayLoan(\r\n        uint256 loanId,\r\n        uint256 repaymentAmount\r\n    ) external nonReentrant {\r\n        Loan storage loan = loans[loanId];\r\n        require(loan.active, \"Loan is not active\");\r\n        require(loan.borrower == msg.sender, \"Not the borrower\");\r\n\r\n        // Calculate interest\r\n        uint256 interest = calculateInterest(loanId);\r\n        uint256 totalDue = loan.loanAmount + interest;\r\n\r\n        require(repaymentAmount >= totalDue, \"Insufficient repayment amount\");\r\n\r\n        // Transfer stablecoin from borrower to contract\r\n        IERC20(stablecoinAddress).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            repaymentAmount\r\n        );\r\n\r\n        // Close the loan\r\n        loan.active = false;\r\n        loan.lastInterestCalculation = block.timestamp;\r\n\r\n        // Update platform stats\r\n        platformStablecoinBalance += repaymentAmount;\r\n        totalLoansOutstanding -= loan.loanAmount;\r\n\r\n        // Return collateral to user\r\n        // Note: We don't need to update userCollateralBalance as it wasn't decreased when loan created\r\n\r\n        emit LoanRepaid(loanId, msg.sender, repaymentAmount, interest);\r\n    }\r\n\r\n    /**\r\n     * @dev Check if a loan needs liquidation based on current BTC/USD price\r\n     * @param loanId ID of the loan to check\r\n     * @return true if loan should be liquidated\r\n     */\r\n    function shouldLiquidate(uint256 loanId) public view returns (bool) {\r\n        Loan storage loan = loans[loanId];\r\n        if (!loan.active || loan.liquidated) {\r\n            return false;\r\n        }\r\n\r\n        // Calculate current collateral value\r\n        uint256 collateralValueUsd = calculateUsdValue(loan.collateralAmount);\r\n\r\n        // Calculate total loan value including interest\r\n        uint256 interest = calculateInterest(loanId);\r\n        uint256 totalLoanValue = loan.loanAmount + interest;\r\n\r\n        // Calculate current collateral ratio\r\n        uint256 currentRatio = (collateralValueUsd *\r\n            COLLATERAL_RATIO_DENOMINATOR) / totalLoanValue;\r\n\r\n        // Return true if current ratio is below liquidation threshold\r\n        return currentRatio < liquidationThreshold;\r\n    }\r\n\r\n    /**\r\n     * @dev Liquidate an undercollateralized loan\r\n     * @param loanId ID of the loan to liquidate\r\n     */\r\n    function liquidateLoan(uint256 loanId) external nonReentrant {\r\n        require(\r\n            shouldLiquidate(loanId),\r\n            \"Loan is not eligible for liquidation\"\r\n        );\r\n\r\n        Loan storage loan = loans[loanId];\r\n\r\n        // Calculate interest and total amount due\r\n        uint256 interest = calculateInterest(loanId);\r\n        uint256 totalDue = loan.loanAmount + interest;\r\n\r\n        // Calculate collateral value\r\n        uint256 collateralValueUsd = calculateUsdValue(loan.collateralAmount);\r\n\r\n        // Mark loan as liquidated\r\n        loan.liquidated = true;\r\n        loan.active = false;\r\n\r\n        // Update user's collateral balance\r\n        // Note: collateral is now owned by the protocol\r\n\r\n        // Update platform stats\r\n        totalLoansOutstanding -= loan.loanAmount;\r\n\r\n        emit LoanLiquidated(\r\n            loanId,\r\n            loan.borrower,\r\n            msg.sender,\r\n            loan.collateralAmount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Update the required collateral ratio\r\n     * @param newRatio New collateral ratio (e.g., 150 for 150%)\r\n     */\r\n    function updateCollateralRatio(uint256 newRatio) external onlyOwner {\r\n        require(newRatio > 100, \"Collateral ratio must be greater than 100%\");\r\n        require(newRatio <= 300, \"Collateral ratio must be less than 300%\");\r\n\r\n        uint256 oldRatio = requiredCollateralRatio;\r\n        requiredCollateralRatio = newRatio;\r\n\r\n        emit CollateralRatioUpdated(oldRatio, newRatio);\r\n    }\r\n\r\n    /**\r\n     * @dev Add liquidity to the platform's stablecoin balance\r\n     * @param amount Amount of stablecoin to add\r\n     */\r\n    function addLiquidity(uint256 amount) external {\r\n        require(amount > 0, \"Amount must be greater than zero\");\r\n\r\n        // Transfer stablecoin from user to contract\r\n        IERC20(stablecoinAddress).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            amount\r\n        );\r\n\r\n        // Update platform stablecoin balance\r\n        platformStablecoinBalance += amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw platform fees (owner only)\r\n     * @param amount Amount to withdraw\r\n     */\r\n    function withdrawFees(uint256 amount) external onlyOwner {\r\n        require(amount <= protocolFeeBalance, \"Insufficient fee balance\");\r\n\r\n        // Update fee balance\r\n        protocolFeeBalance -= amount;\r\n        platformStablecoinBalance -= amount;\r\n\r\n        // Transfer stablecoin to owner\r\n        IERC20(stablecoinAddress).safeTransfer(owner(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Implementation for Chainlink Automation\r\n     * Checks if any loans need liquidation\r\n     */\r\n    function checkUpkeep(\r\n        bytes calldata /* checkData */\r\n    )\r\n        external\r\n        view\r\n        override\r\n        returns (bool upkeepNeeded, bytes memory performData)\r\n    {\r\n        uint256[] memory loansToLiquidate = new uint256[](nextLoanId);\r\n        uint256 count = 0;\r\n\r\n        // Check each loan for liquidation eligibility\r\n        for (uint256 i = 0; i < nextLoanId; i++) {\r\n            if (shouldLiquidate(i)) {\r\n                loansToLiquidate[count] = i;\r\n                count++;\r\n            }\r\n        }\r\n\r\n        // If any loans need liquidation, prepare performData\r\n        if (count > 0) {\r\n            upkeepNeeded = true;\r\n\r\n            // Create fixed-size array with the exact count\r\n            uint256[] memory finalLoans = new uint256[](count);\r\n            for (uint256 i = 0; i < count; i++) {\r\n                finalLoans[i] = loansToLiquidate[i];\r\n            }\r\n\r\n            // Pack the loan IDs into performData\r\n            performData = abi.encode(finalLoans);\r\n        } else {\r\n            upkeepNeeded = false;\r\n            performData = \"\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Implementation for Chainlink Automation\r\n     * Liquidates loans that need liquidation\r\n     */\r\n    function performUpkeep(bytes calldata performData) external override {\r\n        if (performData.length > 0) {\r\n            uint256[] memory loansToLiquidate = abi.decode(\r\n                performData,\r\n                (uint256[])\r\n            );\r\n\r\n            for (uint256 i = 0; i < loansToLiquidate.length; i++) {\r\n                uint256 loanId = loansToLiquidate[i];\r\n\r\n                // Double-check if loan still needs liquidation\r\n                if (shouldLiquidate(loanId)) {\r\n                    // Liquidate the loan\r\n                    Loan storage loan = loans[loanId];\r\n\r\n                    if (loan.active && !loan.liquidated) {\r\n                        // Mark loan as liquidated\r\n                        loan.liquidated = true;\r\n                        loan.active = false;\r\n\r\n                        // Update stats\r\n                        totalLoansOutstanding -= loan.loanAmount;\r\n\r\n                        emit LoanLiquidated(\r\n                            loanId,\r\n                            loan.borrower,\r\n                            address(this),\r\n                            loan.collateralAmount\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/BitPesaPriceConsumer.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n/**\r\n * @title BitPesaPriceConsumer\r\n * @dev Contract to consume BTC/USD price data from Chainlink Price Feeds\r\n */\r\ncontract BitPesaPriceConsumer is Ownable {\r\n    // Chainlink Price Feed interfaces\r\n    AggregatorV3Interface public btcUsdPriceFeed;\r\n    // Price data\r\n    uint256 public latestBtcPrice;\r\n    uint256 public lastUpdateTimestamp;\r\n    // Events\r\n    event PriceUpdated(uint256 price, uint256 timestamp);\r\n    event PriceFeedChanged(address oldPriceFeed, address newPriceFeed);\r\n\r\n    /**\r\n     * @dev Constructor sets the Chainlink Price Feed address\r\n     * @param _btcUsdPriceFeed Address of the BTC/USD price feed\r\n     */\r\n    constructor(address _btcUsdPriceFeed) Ownable(msg.sender) {\r\n        btcUsdPriceFeed = AggregatorV3Interface(_btcUsdPriceFeed);\r\n        updatePrice();\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the latest price from the Chainlink Price Feed\r\n     * @return The latest BTC/USD price\r\n     */\r\n    function updatePrice() public returns (uint256) {\r\n        (\r\n            ,\r\n            /* uint80 roundID */ int price,\r\n            ,\r\n            /* uint startedAt */ uint timeStamp /* uint80 answeredInRound */,\r\n\r\n        ) = btcUsdPriceFeed.latestRoundData();\r\n\r\n        require(price > 0, \"Invalid price\");\r\n\r\n        latestBtcPrice = uint256(price);\r\n        lastUpdateTimestamp = timeStamp;\r\n\r\n        emit PriceUpdated(latestBtcPrice, lastUpdateTimestamp);\r\n\r\n        return latestBtcPrice;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the latest price without updating storage\r\n     * @return The latest BTC/USD price\r\n     */\r\n    function getLatestPrice() public view returns (uint256) {\r\n        (\r\n            ,\r\n            /* uint80 roundID */ int price /* uint startedAt */ /* uint timeStamp */ /* uint80 answeredInRound */,\r\n            ,\r\n            ,\r\n\r\n        ) = btcUsdPriceFeed.latestRoundData();\r\n\r\n        require(price > 0, \"Invalid price\");\r\n\r\n        return uint256(price);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the number of decimals in the price feed\r\n     * @return The number of decimals\r\n     */\r\n    function getPriceDecimals() public view returns (uint8) {\r\n        return btcUsdPriceFeed.decimals();\r\n    }\r\n\r\n    /**\r\n     * @dev Change the price feed address (owner only)\r\n     * @param _newPriceFeed New price feed address\r\n     */\r\n    function changePriceFeed(address _newPriceFeed) external onlyOwner {\r\n        address oldPriceFeed = address(btcUsdPriceFeed);\r\n        btcUsdPriceFeed = AggregatorV3Interface(_newPriceFeed);\r\n\r\n        emit PriceFeedChanged(oldPriceFeed, _newPriceFeed);\r\n    }\r\n}\r\n"
    },
    "contracts/BitPesaTokenBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\r\nimport \"@chainlink/contracts-ccip/contracts/interfaces/IRouterClient.sol\";\r\nimport \"@chainlink/contracts-ccip/contracts/libraries/Client.sol\";\r\n\r\n/**\r\n * @title BitPesaTokenBridge\r\n * @dev A cross-chain token bridge using Chainlink CCIP to transfer WBTC between chains\r\n */\r\ncontract BitPesaTokenBridge is ReentrancyGuard, Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Event emitted when tokens are sent cross-chain\r\n    event TokensTransferred(\r\n        bytes32 indexed messageId,\r\n        uint64 indexed destinationChainSelector,\r\n        address indexed receiver,\r\n        address token,\r\n        uint256 amount,\r\n        address feeToken\r\n    );\r\n\r\n    // Event emitted when tokens are received from another chain\r\n    event TokensReceived(\r\n        bytes32 indexed messageId,\r\n        uint64 indexed sourceChainSelector,\r\n        address indexed sender,\r\n        address token,\r\n        uint256 amount\r\n    );\r\n\r\n    // Chainlink CCIP router\r\n    IRouterClient public immutable router;\r\n\r\n    // WBTC token address\r\n    address public wbtcAddress;\r\n\r\n    // Supported destination chains\r\n    mapping(uint64 => bool) public supportedChains;\r\n\r\n    // Constructor\r\n    constructor(address _router, address _wbtcAddress) Ownable(msg.sender) {\r\n        router = IRouterClient(_router);\r\n        wbtcAddress = _wbtcAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a supported destination chain\r\n     * @param chainSelector The chain selector for the destination chain\r\n     */\r\n    function addSupportedChain(uint64 chainSelector) external onlyOwner {\r\n        supportedChains[chainSelector] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove a supported destination chain\r\n     * @param chainSelector The chain selector for the destination chain\r\n     */\r\n    function removeSupportedChain(uint64 chainSelector) external onlyOwner {\r\n        supportedChains[chainSelector] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens to another chain\r\n     * @param destinationChainSelector The chain selector for the destination chain\r\n     * @param receiver The address of the receiver on the destination chain\r\n     * @param token The address of the token to transfer\r\n     * @param amount The amount of tokens to transfer\r\n     * @return messageId The ID of the CCIP message\r\n     */\r\n    function transferTokens(\r\n        uint64 destinationChainSelector,\r\n        address receiver,\r\n        address token,\r\n        uint256 amount\r\n    ) external nonReentrant returns (bytes32 messageId) {\r\n        require(supportedChains[destinationChainSelector], \"Destination chain not supported\");\r\n        require(token == wbtcAddress, \"Only WBTC transfers supported\");\r\n        require(amount > 0, \"Amount must be greater than 0\");\r\n\r\n        // Transfer tokens from sender to this contract\r\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        // Approve the Router to spend tokens\r\n        IERC20(token).approve(address(router), amount);\r\n\r\n        // Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message\r\n        Client.EVM2AnyMessage memory message = Client.EVM2AnyMessage({\r\n            receiver: abi.encode(receiver), // ABI-encoded receiver address\r\n            data: abi.encode(token, amount), // ABI-encoded data with token and amount\r\n            tokenAmounts: _buildTokenAmounts(token, amount),\r\n            extraArgs: Client._argsToBytes(\r\n                // Additional arguments for CCIP\r\n                Client.EVMExtraArgsV1({gasLimit: 200_000})\r\n            ),\r\n            feeToken: address(0) // Use native blockchain token for fees\r\n        });\r\n\r\n        // Get fee amount required for the CCIP transfer\r\n        uint256 fees = router.getFee(destinationChainSelector, message);\r\n        \r\n        // Send the message through the router and store the returned message ID\r\n        messageId = router.ccipSend{value: fees}(destinationChainSelector, message);\r\n\r\n        emit TokensTransferred(\r\n            messageId,\r\n            destinationChainSelector,\r\n            receiver,\r\n            token,\r\n            amount,\r\n            address(0)\r\n        );\r\n\r\n        return messageId;\r\n    }\r\n\r\n    /**\r\n     * @dev Helper function to build the tokenAmounts array for the CCIP message\r\n     * @param token The token address\r\n     * @param amount The token amount\r\n     * @return tokenAmounts An array of Client.EVMTokenAmount structs\r\n     */\r\n    function _buildTokenAmounts(address token, uint256 amount) internal pure returns (Client.EVMTokenAmount[] memory) {\r\n        Client.EVMTokenAmount[] memory tokenAmounts = new Client.EVMTokenAmount[](1);\r\n        tokenAmounts[0] = Client.EVMTokenAmount({\r\n            token: token,\r\n            amount: amount\r\n        });\r\n        return tokenAmounts;\r\n    }    /**\r\n     * @dev Handle receiving tokens from another chain through CCIP\r\n     * @param message The CCIP message containing the token transfer details\r\n     */    function ccipReceive(Client.Any2EVMMessage memory message) external nonReentrant {\r\n        // Verify that the message is from the router\r\n        require(msg.sender == address(router), \"Only router can call ccipReceive\");\r\n          // Decode the sender address from the message\r\n        address sender = abi.decode(message.sender, (address));\r\n          // Check if we received any tokens\r\n        if (message.destTokenAmounts.length > 0) {\r\n            // In the current CCIP version, the field is called destTokenAmounts\r\n            Client.EVMTokenAmount memory tokenAmount = message.destTokenAmounts[0];\r\n            \r\n            // Emit an event with the details of the received tokens\r\n            emit TokensReceived(\r\n                message.messageId,\r\n                message.sourceChainSelector,\r\n                sender,\r\n                tokenAmount.token,\r\n                tokenAmount.amount\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Allow the contract to receive Ether for CCIP fees\r\n     */\r\n    receive() external payable {}\r\n}\r\n"
    },
    "contracts/libraries/CCIPClient.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// End consumer library.\nlibrary Client {\n    /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\n    struct EVMTokenAmount {\n        address token; // token address on the local chain.\n        uint256 amount; // Amount of tokens.\n    }\n\n    struct Any2EVMMessage {\n        bytes32 messageId; // MessageId corresponding to ccipSend on source.\n        uint64 sourceChainSelector; // Source chain selector.\n        bytes sender; // abi.decode(sender) if coming from an EVM chain.\n        bytes data; // payload sent in original message.\n        EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\n    }\n\n    // If extraArgs is empty bytes, the default is 200k gas limit.\n    struct EVM2AnyMessage {\n        bytes receiver; // abi.encode(receiver address) for dest EVM chains.\n        bytes data; // Data payload.\n        EVMTokenAmount[] tokenAmounts; // Token transfers.\n        address feeToken; // Address of feeToken. address(0) means you will send msg.value.\n        bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV2).\n    }\n\n    // Tag to indicate only a gas limit. Only usable for EVM as destination chain.\n    bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\n\n    struct EVMExtraArgsV1 {\n        uint256 gasLimit;\n    }\n\n    function _argsToBytes(\n        EVMExtraArgsV1 memory extraArgs\n    ) internal pure returns (bytes memory bts) {\n        return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\n    }\n\n    // Tag to indicate a gas limit (or dest chain equivalent processing units) and Out Of Order Execution. This tag is\n    // available for multiple chain families. If there is no chain family specific tag, this is the default available\n    // for a chain.\n    // Note: not available for Solana VM based chains.\n    bytes4 public constant GENERIC_EXTRA_ARGS_V2_TAG = 0x181dcf10;\n\n    /// @param gasLimit: gas limit for the callback on the destination chain.\n    /// @param allowOutOfOrderExecution: if true, it indicates that the message can be executed in any order relative to\n    /// other messages from the same sender. This value's default varies by chain. On some chains, a particular value is\n    /// enforced, meaning if the expected value is not set, the message request will revert.\n    /// @dev Fully compatible with the previously existing EVMExtraArgsV2.\n    struct GenericExtraArgsV2 {\n        uint256 gasLimit;\n        bool allowOutOfOrderExecution;\n    }\n\n    // Extra args tag for chains that use the Solana VM.\n    bytes4 public constant SVM_EXTRA_ARGS_V1_TAG = 0x1f3b3aba;\n\n    struct SVMExtraArgsV1 {\n        uint32 computeUnits;\n        uint64 accountIsWritableBitmap;\n        bool allowOutOfOrderExecution;\n        bytes32 tokenReceiver;\n        // Additional accounts needed for execution of CCIP receiver. Must be empty if message.receiver is zero.\n        // Token transfer related accounts are specified in the token pool lookup table on SVM.\n        bytes32[] accounts;\n    }\n\n    /// @dev The maximum number of accounts that can be passed in SVMExtraArgs.\n    uint256 public constant SVM_EXTRA_ARGS_MAX_ACCOUNTS = 64;\n\n    /// @dev The expected static payload size of a token transfer when Borsh encoded and submitted to SVM.\n    /// TokenPool extra data and offchain data sizes are dynamic, and should be accounted for separately.\n    uint256 public constant SVM_TOKEN_TRANSFER_DATA_OVERHEAD =\n        (4 + 32) + // source_pool\n            32 + // token_address\n            4 + // gas_amount\n            4 + // extra_data overhead\n            32 + // amount\n            32 + // size of the token lookup table account\n            32 + // token-related accounts in the lookup table, over-estimated to 32, typically between 11 - 13\n            32 + // token account belonging to the token receiver, e.g ATA, not included in the token lookup table\n            32 + // per-chain token pool config, not included in the token lookup table\n            32 + // per-chain token billing config, not always included in the token lookup table\n            32; // OffRamp pool signer PDA, not included in the token lookup table\n\n    /// @dev Number of overhead accounts needed for message execution on SVM.\n    /// @dev These are message.receiver, and the OffRamp Signer PDA specific to the receiver.\n    uint256 public constant SVM_MESSAGING_ACCOUNTS_OVERHEAD = 2;\n\n    /// @dev The size of each SVM account address in bytes.\n    uint256 public constant SVM_ACCOUNT_BYTE_SIZE = 32;\n\n    function _argsToBytes(\n        GenericExtraArgsV2 memory extraArgs\n    ) internal pure returns (bytes memory bts) {\n        return abi.encodeWithSelector(GENERIC_EXTRA_ARGS_V2_TAG, extraArgs);\n    }\n\n    function _svmArgsToBytes(\n        SVMExtraArgsV1 memory extraArgs\n    ) internal pure returns (bytes memory bts) {\n        return abi.encodeWithSelector(SVM_EXTRA_ARGS_V1_TAG, extraArgs);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}