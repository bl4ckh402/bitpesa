{
  "address": "0xa77eA5c2aBF21b9AfF0dA44B42AcA35E4d95285a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wbtcAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stablecoinAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_btcUsdPriceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRatio",
          "type": "uint256"
        }
      ],
      "name": "CollateralRatioUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanAmount",
          "type": "uint256"
        }
      ],
      "name": "LoanCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralLiquidated",
          "type": "uint256"
        }
      ],
      "name": "LoanLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repaidAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestPaid",
          "type": "uint256"
        }
      ],
      "name": "LoanRepaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COLLATERAL_RATIO_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "btcUsdPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "calculateInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "wbtcAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateUsdValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "loanAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "durationDays",
          "type": "uint256"
        }
      ],
      "name": "createLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBtcUsdPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRatePerYear",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "liquidateLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "loans",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "loanAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRate",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "liquidated",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "lastInterestCalculation",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLoanDurationDays",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextLoanId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformStablecoinBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "repaymentAmount",
          "type": "uint256"
        }
      ],
      "name": "repayLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredCollateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "shouldLiquidate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stablecoinAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCollateralLocked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLoansOutstanding",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newRatio",
          "type": "uint256"
        }
      ],
      "name": "updateCollateralRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userCollateralBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wbtcAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0b1cc5a553eb1fbea3db74d2d19773871e4b90ae94f201c6dda45f1a94141b4b",
  "receipt": {
    "to": null,
    "from": "0x08a23b78BC3D082134D0e716e9453519fAAe1C8E",
    "contractAddress": "0xa77eA5c2aBF21b9AfF0dA44B42AcA35E4d95285a",
    "transactionIndex": 2,
    "gasUsed": "1820605",
    "logsBloom": "0x
    "blockHash": "0x4621fb6897ac04631e641822e1be9674ccef470fc0b4294f19ccdc843e8b306e",
    "transactionHash": "0x0b1cc5a553eb1fbea3db74d2d19773871e4b90ae94f201c6dda45f1a94141b4b",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 41843155,
        "transactionHash": "0x0b1cc5a553eb1fbea3db74d2d19773871e4b90ae94f201c6dda45f1a94141b4b",
        "address": "0xa77eA5c2aBF21b9AfF0dA44B42AcA35E4d95285a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000008a23b78bc3d082134d0e716e9453519faae1c8e"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x4621fb6897ac04631e641822e1be9674ccef470fc0b4294f19ccdc843e8b306e"
      }
    ],
    "blockNumber": 41843155,
    "cumulativeGasUsed": "1931703",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x50b7545627a5162F82A992c33b87aDc75187B218",
    "0x5425890298aed601595a70AB815c96711a31Bc65",
    "0x31CF013A08c6Ac228C94551d535d5BAfE19c602a"
  ],
  "numDeployments": 1,
  "solcInputHash": "ba8c400a2b1aabcd785e89f90ece9ca0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wbtcAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stablecoinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_btcUsdPriceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRatio\",\"type\":\"uint256\"}],\"name\":\"CollateralRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"}],\"name\":\"LoanCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralLiquidated\",\"type\":\"uint256\"}],\"name\":\"LoanLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repaidAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestPaid\",\"type\":\"uint256\"}],\"name\":\"LoanRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COLLATERAL_RATIO_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"btcUsdPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"calculateInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wbtcAmount\",\"type\":\"uint256\"}],\"name\":\"calculateUsdValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationDays\",\"type\":\"uint256\"}],\"name\":\"createLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBtcUsdPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRatePerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"liquidateLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"loans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"liquidated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lastInterestCalculation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLoanDurationDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextLoanId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformStablecoinBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repaymentAmount\",\"type\":\"uint256\"}],\"name\":\"repayLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"shouldLiquidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stablecoinAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollateralLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLoansOutstanding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRatio\",\"type\":\"uint256\"}],\"name\":\"updateCollateralRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCollateralBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbtcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A DeFi platform that allows users to deposit WBTC as collateral and take loans in stablecoins Integrates Chainlink Price Feeds for accurate collateral valuation Uses Chainlink Automation for liquidation checks\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"addLiquidity(uint256)\":{\"details\":\"Add liquidity to the platform's stablecoin balance\",\"params\":{\"amount\":\"Amount of stablecoin to add\"}},\"calculateInterest(uint256)\":{\"details\":\"Calculate interest accrued on a loan\",\"params\":{\"loanId\":\"ID of the loan\"},\"returns\":{\"_0\":\"Interest amount in stablecoin\"}},\"calculateUsdValue(uint256)\":{\"details\":\"Calculate the USD value of WBTC\",\"params\":{\"wbtcAmount\":\"Amount of WBTC (in wei)\"},\"returns\":{\"_0\":\"USD value with 8 decimal places\"}},\"checkUpkeep(bytes)\":{\"details\":\"Implementation for Chainlink Automation Checks if any loans need liquidation\"},\"constructor\":{\"params\":{\"_btcUsdPriceFeed\":\"Address of the Chainlink BTC/USD price feed\",\"_stablecoinAddress\":\"Address of the stablecoin used for loans\",\"_wbtcAddress\":\"Address of the WBTC token\"}},\"createLoan(uint256,uint256,uint256)\":{\"details\":\"Create a new loan backed by WBTC collateral\",\"params\":{\"collateralAmount\":\"Amount of WBTC to use as collateral (in wei)\",\"durationDays\":\"Duration of the loan in days\",\"loanAmount\":\"Amount of stablecoin to borrow\"}},\"deposit(uint256)\":{\"details\":\"Deposit WBTC as collateral\",\"params\":{\"amount\":\"Amount of WBTC to deposit (in wei)\"}},\"getBtcUsdPrice()\":{\"details\":\"Get the latest BTC/USD price from Chainlink\",\"returns\":{\"_0\":\"price in USD with 8 decimals\"}},\"liquidateLoan(uint256)\":{\"details\":\"Liquidate an undercollateralized loan\",\"params\":{\"loanId\":\"ID of the loan to liquidate\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"performUpkeep(bytes)\":{\"details\":\"Implementation for Chainlink Automation Liquidates loans that need liquidation\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"repayLoan(uint256,uint256)\":{\"details\":\"Repay a loan and retrieve collateral\",\"params\":{\"loanId\":\"ID of the loan to repay\",\"repaymentAmount\":\"Amount of stablecoin to repay\"}},\"shouldLiquidate(uint256)\":{\"details\":\"Check if a loan needs liquidation based on current BTC/USD price\",\"params\":{\"loanId\":\"ID of the loan to check\"},\"returns\":{\"_0\":\"true if loan should be liquidated\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateCollateralRatio(uint256)\":{\"details\":\"Update the required collateral ratio\",\"params\":{\"newRatio\":\"New collateral ratio (e.g., 150 for 150%)\"}},\"withdraw(uint256)\":{\"details\":\"Withdraw WBTC collateral if not being used for active loans\",\"params\":{\"amount\":\"Amount of WBTC to withdraw (in wei)\"}},\"withdrawFees(uint256)\":{\"details\":\"Withdraw platform fees (owner only)\",\"params\":{\"amount\":\"Amount to withdraw\"}}},\"title\":\"BitPesa WBTC Lending Platform\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BitPesaLending.sol\":\"BitPesaLending\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function _preventExecution() internal view {\\n    // solhint-disable-next-line avoid-tx-origin\\n    if (tx.origin != address(0) && tx.origin != address(0x1111111111111111111111111111111111111111)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    _preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x8c97744adc25cf30d1a2509bff6c0ddc9b36feb75f8e38c85d5c62b8ec773159\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AutomationBase} from \\\"./AutomationBase.sol\\\";\\nimport {AutomationCompatibleInterface} from \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0xce623f3e7fa4addf240032d2817b2b489ac08e79fae14a5cc5850ed3f1acddf8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xf504b227c442cd4ed31b336b7bd15cfcb23220c84c26e750975c7e7d959125aa\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/BitPesaLending.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title BitPesa WBTC Lending Platform\\r\\n * @dev A DeFi platform that allows users to deposit WBTC as collateral and take loans in stablecoins\\r\\n * Integrates Chainlink Price Feeds for accurate collateral valuation\\r\\n * Uses Chainlink Automation for liquidation checks\\r\\n */\\r\\ncontract BitPesaLending is\\r\\n    ReentrancyGuard,\\r\\n    Ownable,\\r\\n    AutomationCompatibleInterface\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // Token addresses\\r\\n    address public wbtcAddress;\\r\\n    address public stablecoinAddress;\\r\\n\\r\\n    // Chainlink price feed for BTC/USD\\r\\n    AggregatorV3Interface public btcUsdPriceFeed;\\r\\n\\r\\n    // Loan parameters\\r\\n    uint256 public constant COLLATERAL_RATIO_DENOMINATOR = 100;\\r\\n    uint256 public requiredCollateralRatio = 150; // 150% collateralization required\\r\\n    uint256 public liquidationThreshold = 125; // Liquidate if CR drops below 125%\\r\\n    uint256 public borrowFeePercent = 1; // 1% fee on borrowed amount\\r\\n    uint256 public maxLoanDurationDays = 30;\\r\\n\\r\\n    // Interest rate parameters (APR in basis points, 1% = 100)\\r\\n    uint256 public interestRatePerYear = 500; // 5% APR\\r\\n\\r\\n    struct Loan {\\r\\n        uint256 id;\\r\\n        address borrower;\\r\\n        uint256 collateralAmount; // In WBTC\\r\\n        uint256 loanAmount; // In stablecoin\\r\\n        uint256 startTimestamp;\\r\\n        uint256 endTimestamp;\\r\\n        uint256 interestRate; // In basis points (1% = 100)\\r\\n        bool active;\\r\\n        bool liquidated;\\r\\n        uint256 lastInterestCalculation;\\r\\n    }\\r\\n\\r\\n    // Mapping from loan ID to loan details\\r\\n    mapping(uint256 => Loan) public loans;\\r\\n    uint256 public nextLoanId;\\r\\n\\r\\n    // User balances in WBTC\\r\\n    mapping(address => uint256) public userCollateralBalance;\\r\\n\\r\\n    // Total platform stats\\r\\n    uint256 public totalCollateralLocked;\\r\\n    uint256 public totalLoansOutstanding;\\r\\n    uint256 public platformStablecoinBalance;\\r\\n    uint256 public protocolFeeBalance;\\r\\n\\r\\n    // Events\\r\\n    event Deposit(address indexed user, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 amount);\\r\\n    event LoanCreated(\\r\\n        uint256 indexed loanId,\\r\\n        address indexed borrower,\\r\\n        uint256 collateralAmount,\\r\\n        uint256 loanAmount\\r\\n    );\\r\\n    event LoanRepaid(\\r\\n        uint256 indexed loanId,\\r\\n        address indexed borrower,\\r\\n        uint256 repaidAmount,\\r\\n        uint256 interestPaid\\r\\n    );\\r\\n    event LoanLiquidated(\\r\\n        uint256 indexed loanId,\\r\\n        address indexed borrower,\\r\\n        address indexed liquidator,\\r\\n        uint256 collateralLiquidated\\r\\n    );\\r\\n    event CollateralRatioUpdated(uint256 oldRatio, uint256 newRatio);\\r\\n\\r\\n    /**\\r\\n     * @param _wbtcAddress Address of the WBTC token\\r\\n     * @param _stablecoinAddress Address of the stablecoin used for loans\\r\\n     * @param _btcUsdPriceFeed Address of the Chainlink BTC/USD price feed\\r\\n     */\\r\\n    constructor(\\r\\n        address _wbtcAddress,\\r\\n        address _stablecoinAddress,\\r\\n        address _btcUsdPriceFeed\\r\\n    ) Ownable(msg.sender) {\\r\\n        wbtcAddress = _wbtcAddress;\\r\\n        stablecoinAddress = _stablecoinAddress;\\r\\n        btcUsdPriceFeed = AggregatorV3Interface(_btcUsdPriceFeed);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the latest BTC/USD price from Chainlink\\r\\n     * @return price in USD with 8 decimals\\r\\n     */\\r\\n    function getBtcUsdPrice() public view returns (uint256) {\\r\\n        (, int256 price, , , ) = btcUsdPriceFeed.latestRoundData();\\r\\n        require(price > 0, \\\"Invalid price\\\");\\r\\n        return uint256(price);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calculate the USD value of WBTC\\r\\n     * @param wbtcAmount Amount of WBTC (in wei)\\r\\n     * @return USD value with 8 decimal places\\r\\n     */\\r\\n    function calculateUsdValue(\\r\\n        uint256 wbtcAmount\\r\\n    ) public view returns (uint256) {\\r\\n        uint256 btcPrice = getBtcUsdPrice();\\r\\n        // Convert WBTC amount (with 8 decimals) to USD value\\r\\n        // 1 WBTC = 10^8 sats\\r\\n        return (wbtcAmount * btcPrice) / 1e8;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deposit WBTC as collateral\\r\\n     * @param amount Amount of WBTC to deposit (in wei)\\r\\n     */\\r\\n    function deposit(uint256 amount) external nonReentrant {\\r\\n        require(amount > 0, \\\"Amount must be greater than zero\\\");\\r\\n\\r\\n        // Transfer WBTC from user to contract\\r\\n        IERC20(wbtcAddress).safeTransferFrom(msg.sender, address(this), amount);\\r\\n\\r\\n        // Update user balance and total collateral\\r\\n        userCollateralBalance[msg.sender] += amount;\\r\\n        totalCollateralLocked += amount;\\r\\n\\r\\n        emit Deposit(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw WBTC collateral if not being used for active loans\\r\\n     * @param amount Amount of WBTC to withdraw (in wei)\\r\\n     */\\r\\n    function withdraw(uint256 amount) external nonReentrant {\\r\\n        require(amount > 0, \\\"Amount must be greater than zero\\\");\\r\\n        require(\\r\\n            userCollateralBalance[msg.sender] >= amount,\\r\\n            \\\"Insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        // Calculate available collateral (not being used for loans)\\r\\n        uint256 usedCollateral = 0;\\r\\n        for (uint256 i = 0; i < nextLoanId; i++) {\\r\\n            if (loans[i].borrower == msg.sender && loans[i].active) {\\r\\n                usedCollateral += loans[i].collateralAmount;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(\\r\\n            userCollateralBalance[msg.sender] - usedCollateral >= amount,\\r\\n            \\\"Collateral is locked in active loans\\\"\\r\\n        );\\r\\n\\r\\n        // Update balances\\r\\n        userCollateralBalance[msg.sender] -= amount;\\r\\n        totalCollateralLocked -= amount;\\r\\n\\r\\n        // Transfer WBTC back to user\\r\\n        IERC20(wbtcAddress).safeTransfer(msg.sender, amount);\\r\\n\\r\\n        emit Withdraw(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Create a new loan backed by WBTC collateral\\r\\n     * @param collateralAmount Amount of WBTC to use as collateral (in wei)\\r\\n     * @param loanAmount Amount of stablecoin to borrow\\r\\n     * @param durationDays Duration of the loan in days\\r\\n     */\\r\\n    function createLoan(\\r\\n        uint256 collateralAmount,\\r\\n        uint256 loanAmount,\\r\\n        uint256 durationDays\\r\\n    ) external nonReentrant {\\r\\n        require(collateralAmount > 0, \\\"Collateral must be greater than zero\\\");\\r\\n        require(loanAmount > 0, \\\"Loan amount must be greater than zero\\\");\\r\\n        require(\\r\\n            durationDays > 0 && durationDays <= maxLoanDurationDays,\\r\\n            \\\"Invalid loan duration\\\"\\r\\n        );\\r\\n        require(\\r\\n            userCollateralBalance[msg.sender] >= collateralAmount,\\r\\n            \\\"Insufficient collateral balance\\\"\\r\\n        );\\r\\n\\r\\n        // Calculate USD value of collateral\\r\\n        uint256 collateralValueUsd = calculateUsdValue(collateralAmount);\\r\\n\\r\\n        // Check if loan amount is within allowable limits based on collateral ratio\\r\\n        uint256 maxLoanAmountUsd = (collateralValueUsd *\\r\\n            COLLATERAL_RATIO_DENOMINATOR) / requiredCollateralRatio;\\r\\n        require(\\r\\n            loanAmount <= maxLoanAmountUsd,\\r\\n            \\\"Loan amount exceeds collateral ratio\\\"\\r\\n        );\\r\\n\\r\\n        // Check if platform has enough stablecoin liquidity\\r\\n        require(\\r\\n            platformStablecoinBalance >= loanAmount,\\r\\n            \\\"Insufficient platform liquidity\\\"\\r\\n        );\\r\\n\\r\\n        // Calculate loan fee\\r\\n        uint256 fee = (loanAmount * borrowFeePercent) / 100;\\r\\n        uint256 loanAmountAfterFee = loanAmount - fee;\\r\\n\\r\\n        // Create the loan\\r\\n        uint256 loanId = nextLoanId++;\\r\\n        loans[loanId] = Loan({\\r\\n            id: loanId,\\r\\n            borrower: msg.sender,\\r\\n            collateralAmount: collateralAmount,\\r\\n            loanAmount: loanAmount,\\r\\n            startTimestamp: block.timestamp,\\r\\n            endTimestamp: block.timestamp + (durationDays * 1 days),\\r\\n            interestRate: interestRatePerYear,\\r\\n            active: true,\\r\\n            liquidated: false,\\r\\n            lastInterestCalculation: block.timestamp\\r\\n        });\\r\\n\\r\\n        // Update platform stats\\r\\n        platformStablecoinBalance -= loanAmount;\\r\\n        totalLoansOutstanding += loanAmount;\\r\\n        protocolFeeBalance += fee;\\r\\n\\r\\n        // Transfer stablecoin to borrower\\r\\n        IERC20(stablecoinAddress).safeTransfer(msg.sender, loanAmountAfterFee);\\r\\n\\r\\n        emit LoanCreated(\\r\\n            loanId,\\r\\n            msg.sender,\\r\\n            collateralAmount,\\r\\n            loanAmountAfterFee\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calculate interest accrued on a loan\\r\\n     * @param loanId ID of the loan\\r\\n     * @return Interest amount in stablecoin\\r\\n     */\\r\\n    function calculateInterest(uint256 loanId) public view returns (uint256) {\\r\\n        Loan storage loan = loans[loanId];\\r\\n        require(loan.active, \\\"Loan is not active\\\");\\r\\n\\r\\n        uint256 timeElapsed = block.timestamp - loan.lastInterestCalculation;\\r\\n\\r\\n        // Calculate interest: principal * rate * time\\r\\n        // (loanAmount * interestRatePerYear * timeElapsed) / (100 * 365 days)\\r\\n        return\\r\\n            (loan.loanAmount * loan.interestRate * timeElapsed) /\\r\\n            (10000 * 365 days);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Repay a loan and retrieve collateral\\r\\n     * @param loanId ID of the loan to repay\\r\\n     * @param repaymentAmount Amount of stablecoin to repay\\r\\n     */\\r\\n    function repayLoan(\\r\\n        uint256 loanId,\\r\\n        uint256 repaymentAmount\\r\\n    ) external nonReentrant {\\r\\n        Loan storage loan = loans[loanId];\\r\\n        require(loan.active, \\\"Loan is not active\\\");\\r\\n        require(loan.borrower == msg.sender, \\\"Not the borrower\\\");\\r\\n\\r\\n        // Calculate interest\\r\\n        uint256 interest = calculateInterest(loanId);\\r\\n        uint256 totalDue = loan.loanAmount + interest;\\r\\n\\r\\n        require(repaymentAmount >= totalDue, \\\"Insufficient repayment amount\\\");\\r\\n\\r\\n        // Transfer stablecoin from borrower to contract\\r\\n        IERC20(stablecoinAddress).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            repaymentAmount\\r\\n        );\\r\\n\\r\\n        // Close the loan\\r\\n        loan.active = false;\\r\\n        loan.lastInterestCalculation = block.timestamp;\\r\\n\\r\\n        // Update platform stats\\r\\n        platformStablecoinBalance += repaymentAmount;\\r\\n        totalLoansOutstanding -= loan.loanAmount;\\r\\n\\r\\n        // Return collateral to user\\r\\n        // Note: We don't need to update userCollateralBalance as it wasn't decreased when loan created\\r\\n\\r\\n        emit LoanRepaid(loanId, msg.sender, repaymentAmount, interest);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if a loan needs liquidation based on current BTC/USD price\\r\\n     * @param loanId ID of the loan to check\\r\\n     * @return true if loan should be liquidated\\r\\n     */\\r\\n    function shouldLiquidate(uint256 loanId) public view returns (bool) {\\r\\n        Loan storage loan = loans[loanId];\\r\\n        if (!loan.active || loan.liquidated) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        // Calculate current collateral value\\r\\n        uint256 collateralValueUsd = calculateUsdValue(loan.collateralAmount);\\r\\n\\r\\n        // Calculate total loan value including interest\\r\\n        uint256 interest = calculateInterest(loanId);\\r\\n        uint256 totalLoanValue = loan.loanAmount + interest;\\r\\n\\r\\n        // Calculate current collateral ratio\\r\\n        uint256 currentRatio = (collateralValueUsd *\\r\\n            COLLATERAL_RATIO_DENOMINATOR) / totalLoanValue;\\r\\n\\r\\n        // Return true if current ratio is below liquidation threshold\\r\\n        return currentRatio < liquidationThreshold;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Liquidate an undercollateralized loan\\r\\n     * @param loanId ID of the loan to liquidate\\r\\n     */\\r\\n    function liquidateLoan(uint256 loanId) external nonReentrant {\\r\\n        require(\\r\\n            shouldLiquidate(loanId),\\r\\n            \\\"Loan is not eligible for liquidation\\\"\\r\\n        );\\r\\n\\r\\n        Loan storage loan = loans[loanId];\\r\\n\\r\\n        // Calculate interest and total amount due\\r\\n        uint256 interest = calculateInterest(loanId);\\r\\n        uint256 totalDue = loan.loanAmount + interest;\\r\\n\\r\\n        // Calculate collateral value\\r\\n        uint256 collateralValueUsd = calculateUsdValue(loan.collateralAmount);\\r\\n\\r\\n        // Mark loan as liquidated\\r\\n        loan.liquidated = true;\\r\\n        loan.active = false;\\r\\n\\r\\n        // Update user's collateral balance\\r\\n        // Note: collateral is now owned by the protocol\\r\\n\\r\\n        // Update platform stats\\r\\n        totalLoansOutstanding -= loan.loanAmount;\\r\\n\\r\\n        emit LoanLiquidated(\\r\\n            loanId,\\r\\n            loan.borrower,\\r\\n            msg.sender,\\r\\n            loan.collateralAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update the required collateral ratio\\r\\n     * @param newRatio New collateral ratio (e.g., 150 for 150%)\\r\\n     */\\r\\n    function updateCollateralRatio(uint256 newRatio) external onlyOwner {\\r\\n        require(newRatio > 100, \\\"Collateral ratio must be greater than 100%\\\");\\r\\n        require(newRatio <= 300, \\\"Collateral ratio must be less than 300%\\\");\\r\\n\\r\\n        uint256 oldRatio = requiredCollateralRatio;\\r\\n        requiredCollateralRatio = newRatio;\\r\\n\\r\\n        emit CollateralRatioUpdated(oldRatio, newRatio);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add liquidity to the platform's stablecoin balance\\r\\n     * @param amount Amount of stablecoin to add\\r\\n     */\\r\\n    function addLiquidity(uint256 amount) external {\\r\\n        require(amount > 0, \\\"Amount must be greater than zero\\\");\\r\\n\\r\\n        // Transfer stablecoin from user to contract\\r\\n        IERC20(stablecoinAddress).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            amount\\r\\n        );\\r\\n\\r\\n        // Update platform stablecoin balance\\r\\n        platformStablecoinBalance += amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw platform fees (owner only)\\r\\n     * @param amount Amount to withdraw\\r\\n     */\\r\\n    function withdrawFees(uint256 amount) external onlyOwner {\\r\\n        require(amount <= protocolFeeBalance, \\\"Insufficient fee balance\\\");\\r\\n\\r\\n        // Update fee balance\\r\\n        protocolFeeBalance -= amount;\\r\\n        platformStablecoinBalance -= amount;\\r\\n\\r\\n        // Transfer stablecoin to owner\\r\\n        IERC20(stablecoinAddress).safeTransfer(owner(), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Implementation for Chainlink Automation\\r\\n     * Checks if any loans need liquidation\\r\\n     */\\r\\n    function checkUpkeep(\\r\\n        bytes calldata /* checkData */\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (bool upkeepNeeded, bytes memory performData)\\r\\n    {\\r\\n        uint256[] memory loansToLiquidate = new uint256[](nextLoanId);\\r\\n        uint256 count = 0;\\r\\n\\r\\n        // Check each loan for liquidation eligibility\\r\\n        for (uint256 i = 0; i < nextLoanId; i++) {\\r\\n            if (shouldLiquidate(i)) {\\r\\n                loansToLiquidate[count] = i;\\r\\n                count++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // If any loans need liquidation, prepare performData\\r\\n        if (count > 0) {\\r\\n            upkeepNeeded = true;\\r\\n\\r\\n            // Create fixed-size array with the exact count\\r\\n            uint256[] memory finalLoans = new uint256[](count);\\r\\n            for (uint256 i = 0; i < count; i++) {\\r\\n                finalLoans[i] = loansToLiquidate[i];\\r\\n            }\\r\\n\\r\\n            // Pack the loan IDs into performData\\r\\n            performData = abi.encode(finalLoans);\\r\\n        } else {\\r\\n            upkeepNeeded = false;\\r\\n            performData = \\\"\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Implementation for Chainlink Automation\\r\\n     * Liquidates loans that need liquidation\\r\\n     */\\r\\n    function performUpkeep(bytes calldata performData) external override {\\r\\n        if (performData.length > 0) {\\r\\n            uint256[] memory loansToLiquidate = abi.decode(\\r\\n                performData,\\r\\n                (uint256[])\\r\\n            );\\r\\n\\r\\n            for (uint256 i = 0; i < loansToLiquidate.length; i++) {\\r\\n                uint256 loanId = loansToLiquidate[i];\\r\\n\\r\\n                // Double-check if loan still needs liquidation\\r\\n                if (shouldLiquidate(loanId)) {\\r\\n                    // Liquidate the loan\\r\\n                    Loan storage loan = loans[loanId];\\r\\n\\r\\n                    if (loan.active && !loan.liquidated) {\\r\\n                        // Mark loan as liquidated\\r\\n                        loan.liquidated = true;\\r\\n                        loan.active = false;\\r\\n\\r\\n                        // Update stats\\r\\n                        totalLoansOutstanding -= loan.loanAmount;\\r\\n\\r\\n                        emit LoanLiquidated(\\r\\n                            loanId,\\r\\n                            loan.borrower,\\r\\n                            address(this),\\r\\n                            loan.collateralAmount\\r\\n                        );\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x34a8f8c860274849cdc6513b8bacba5c98d3e6ccc594733d7687e2de02148728\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526096600555607d6006556001600755601e6008556101f460095534801561002a57600080fd5b50604051611d4d380380611d4d8339810160408190526100499161012e565b6001600055338061007457604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61007d816100c0565b50600280546001600160a01b039485166001600160a01b031991821617909155600380549385169382169390931790925560048054919093169116179055610171565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80516001600160a01b038116811461012957600080fd5b919050565b60008060006060848603121561014357600080fd5b61014c84610112565b925061015a60208501610112565b915061016860408501610112565b90509250925092565b611bcd806101806000396000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c80638d404e821161011a578063bb822981116100ad578063e1ec3c681161007c578063e1ec3c6814610403578063ed80c850146104c9578063f131203a146104d2578063f2fde38b146104db578063f7681ddd146104ee57600080fd5b8063bb822981146103bc578063bc174d36146103c5578063ccdd9f5d146103e8578063d81d4484146103fb57600080fd5b8063a85b7715116100e9578063a85b77151461036d578063b40db21214610376578063b5af306214610389578063b6b55f25146103a957600080fd5b80638d404e82146103235780638da5cb5b14610336578063904b513b14610347578063a57475e01461035a57600080fd5b8063615737ef11610192578063715018a611610161578063715018a6146102ec5780637992ec48146102f457806387c51459146103075780638a700b531461031057600080fd5b8063615737ef1461028557806361a2ac39146102b057806364b60700146102c35780636e04ff0d146102cb57600080fd5b80634585e33b116101ce5780634585e33b1461024357806351c6590a146102565780635e318e0714610269578063608526341461027c57600080fd5b80630a22d68c146102005780632e1a7d4d1461021c57806335d1e920146102315780634031234c1461023a575b600080fd5b61020960105481565b6040519081526020015b60405180910390f35b61022f61022a3660046117cb565b6104f7565b005b610209600d5481565b61020960065481565b61022f6102513660046117e4565b610701565b61022f6102643660046117cb565b61080b565b61022f6102773660046117cb565b61085d565b61020960085481565b600354610298906001600160a01b031681565b6040516001600160a01b039091168152602001610213565b600254610298906001600160a01b031681565b61020961090a565b6102de6102d93660046117e4565b6109c2565b604051610213929190611858565b61022f610b44565b61022f6103023660046117cb565b610b58565b610209600b5481565b61022f61031e3660046118af565b610c6a565b600454610298906001600160a01b031681565b6001546001600160a01b0316610298565b61022f6103553660046118d1565b610e33565b6102096103683660046117cb565b611290565b61020960075481565b6102096103843660046117cb565b611332565b6102096103973660046118fd565b600c6020526000908152604090205481565b61022f6103b73660046117cb565b61135f565b61020960095481565b6103d86103d33660046117cb565b61141b565b6040519015158152602001610213565b61022f6103f63660046117cb565b6114ad565b610209606481565b6104736104113660046117cb565b600a6020526000908152604090208054600182015460028301546003840154600485015460058601546006870154600788015460089098015496976001600160a01b03909616969495939492939192909160ff8082169261010090920416908a565b604080519a8b526001600160a01b0390991660208b0152978901969096526060880194909452608087019290925260a086015260c0850152151560e0840152151561010083015261012082015261014001610213565b610209600e5481565b610209600f5481565b61022f6104e93660046118fd565b6115de565b61020960055481565b6104ff611619565b600081116105285760405162461bcd60e51b815260040161051f90611926565b60405180910390fd5b336000908152600c602052604090205481111561057e5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b604482015260640161051f565b6000805b600b548110156105f2576000818152600a60205260409020600101546001600160a01b0316331480156105c657506000818152600a602052604090206007015460ff165b156105ea576000818152600a60205260409020600201546105e79083611971565b91505b600101610582565b50336000908152600c6020526040902054829061061090839061198a565b101561066a5760405162461bcd60e51b8152602060048201526024808201527f436f6c6c61746572616c206973206c6f636b656420696e20616374697665206c6044820152636f616e7360e01b606482015260840161051f565b336000908152600c60205260408120805484929061068990849061198a565b9250508190555081600d60008282546106a2919061198a565b90915550506002546106be906001600160a01b03163384611643565b60405182815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a2506106fe6001600055565b50565b8015610807576000610715828401846119b3565b905060005b815181101561080457600082828151811061073757610737611a80565b6020026020010151905061074a8161141b565b156107fb576000818152600a60205260409020600781015460ff16801561077b57506007810154610100900460ff16155b156107f95760078101805461ffff19166101001790556003810154600e80546000906107a890849061198a565b90915550506001810154600282015460405190815230916001600160a01b03169084907fe4b3cb24da49cbaa1989989a720518b9c8c12f4a6e0d848853745d9271104b0f9060200160405180910390a45b505b5060010161071a565b50505b5050565b6000811161082b5760405162461bcd60e51b815260040161051f90611926565b600354610843906001600160a01b03163330846116a2565b80600f60008282546108559190611971565b909155505050565b6108656116db565b6010548111156108b75760405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e74206665652062616c616e63650000000000000000604482015260640161051f565b80601060008282546108c9919061198a565b9250508190555080600f60008282546108e2919061198a565b90915550506001546106fe906001600160a01b03166003546001600160a01b03169083611643565b6004805460408051633fabe5a360e21b8152905160009384936001600160a01b03169263feaf968c928183019260a0928290030181865afa158015610953573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109779190611ab0565b505050915050600081136109bd5760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420707269636560981b604482015260640161051f565b919050565b600060606000600b5467ffffffffffffffff8111156109e3576109e361199d565b604051908082528060200260200182016040528015610a0c578160200160208202803683370190505b5090506000805b600b54811015610a5f57610a268161141b565b15610a575780838381518110610a3e57610a3e611a80565b602090810291909101015281610a5381611b02565b9250505b600101610a13565b508015610b24576001935060008167ffffffffffffffff811115610a8557610a8561199d565b604051908082528060200260200182016040528015610aae578160200160208202803683370190505b50905060005b82811015610afb57838181518110610ace57610ace611a80565b6020026020010151828281518110610ae857610ae8611a80565b6020908102919091010152600101610ab4565b5080604051602001610b0d9190611b1b565b604051602081830303815290604052935050610b3b565b600093506040518060200160405280600081525092505b50509250929050565b610b4c6116db565b610b566000611708565b565b610b606116db565b60648111610bc35760405162461bcd60e51b815260206004820152602a60248201527f436f6c6c61746572616c20726174696f206d7573742062652067726561746572604482015269207468616e203130302560b01b606482015260840161051f565b61012c811115610c255760405162461bcd60e51b815260206004820152602760248201527f436f6c6c61746572616c20726174696f206d757374206265206c657373207468604482015266616e203330302560c81b606482015260840161051f565b600580549082905560408051828152602081018490527fea851fc89ebccda62380b76fc8e8317f0bcd4d75ea908cf501bd2ebc6ac1c8f2910160405180910390a15050565b610c72611619565b6000828152600a60205260409020600781015460ff16610cc95760405162461bcd60e51b81526020600482015260126024820152714c6f616e206973206e6f742061637469766560701b604482015260640161051f565b60018101546001600160a01b03163314610d185760405162461bcd60e51b815260206004820152601060248201526f2737ba103a3432903137b93937bbb2b960811b604482015260640161051f565b6000610d2384611290565b90506000818360030154610d379190611971565b905080841015610d895760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e742072657061796d656e7420616d6f756e74000000604482015260640161051f565b600354610da1906001600160a01b03163330876116a2565b60078301805460ff19169055426008840155600f8054859190600090610dc8908490611971565b90915550506003830154600e8054600090610de490849061198a565b90915550506040805185815260208101849052339187917f553c9087bff5b534e499a66dac3fa9db2962cd252ea01165239755836ae5345e910160405180910390a35050506108076001600055565b610e3b611619565b60008311610e975760405162461bcd60e51b8152602060048201526024808201527f436f6c6c61746572616c206d7573742062652067726561746572207468616e206044820152637a65726f60e01b606482015260840161051f565b60008211610ef55760405162461bcd60e51b815260206004820152602560248201527f4c6f616e20616d6f756e74206d7573742062652067726561746572207468616e604482015264207a65726f60d81b606482015260840161051f565b600081118015610f0757506008548111155b610f4b5760405162461bcd60e51b815260206004820152601560248201527424b73b30b634b2103637b0b710323ab930ba34b7b760591b604482015260640161051f565b336000908152600c6020526040902054831115610faa5760405162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e7420636f6c6c61746572616c2062616c616e636500604482015260640161051f565b6000610fb584611332565b90506000600554606483610fc99190611b5e565b610fd39190611b75565b9050808411156110315760405162461bcd60e51b8152602060048201526024808201527f4c6f616e20616d6f756e74206578636565647320636f6c6c61746572616c20726044820152636174696f60e01b606482015260840161051f565b83600f5410156110835760405162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e7420706c6174666f726d206c697175696469747900604482015260640161051f565b60006064600754866110959190611b5e565b61109f9190611b75565b905060006110ad828761198a565b600b805491925060009190826110c283611b02565b919050559050604051806101400160405280828152602001336001600160a01b03168152602001898152602001888152602001428152602001876201518061110a9190611b5e565b6111149042611971565b8152600954602080830191909152600160408084018290526000606080860182905242608096870152878252600a8552828220875181559487015193850180546001600160a01b039095166001600160a01b03199095169490941790935590850151600284015590840151600383015591830151600482015560a0830151600582015560c0830151600682015560e08301516007820180546101008087015115150261ff00199315159390931661ffff199091161791909117905561012090920151600890920191909155600f80548992906111f190849061198a565b9250508190555086600e600082825461120a9190611971565b9250508190555082601060008282546112239190611971565b909155505060035461123f906001600160a01b03163384611643565b6040805189815260208101849052339183917f3373919ad665425d2cddb4072830e5935b6ee308440fa99b23383648da473bc0910160405180910390a3505050505061128b6001600055565b505050565b6000818152600a60205260408120600781015460ff166112e75760405162461bcd60e51b81526020600482015260126024820152714c6f616e206973206e6f742061637469766560701b604482015260640161051f565b60008160080154426112f9919061198a565b905064496cebb80081836006015484600301546113169190611b5e565b6113209190611b5e565b61132a9190611b75565b949350505050565b60008061133d61090a565b90506305f5e10061134e8285611b5e565b6113589190611b75565b9392505050565b611367611619565b600081116113875760405162461bcd60e51b815260040161051f90611926565b60025461139f906001600160a01b03163330846116a2565b336000908152600c6020526040812080548392906113be908490611971565b9250508190555080600d60008282546113d79190611971565b909155505060405181815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a26106fe6001600055565b6000818152600a60205260408120600781015460ff16158061144657506007810154610100900460ff165b156114545750600092915050565b60006114638260020154611332565b9050600061147085611290565b905060008184600301546114849190611971565b9050600081611494606486611b5e565b61149e9190611b75565b60065411979650505050505050565b6114b5611619565b6114be8161141b565b6115165760405162461bcd60e51b8152602060048201526024808201527f4c6f616e206973206e6f7420656c696769626c6520666f72206c6971756964616044820152633a34b7b760e11b606482015260840161051f565b6000818152600a602052604081209061152e83611290565b905060008183600301546115429190611971565b905060006115538460020154611332565b60078501805461ffff19166101001790556003850154600e8054929350909160009061158090849061198a565b90915550506001840154600285015460405190815233916001600160a01b03169087907fe4b3cb24da49cbaa1989989a720518b9c8c12f4a6e0d848853745d9271104b0f9060200160405180910390a4505050506106fe6001600055565b6115e66116db565b6001600160a01b03811661161057604051631e4fbdf760e01b81526000600482015260240161051f565b6106fe81611708565b60026000540361163c57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6040516001600160a01b0383811660248301526044820183905261128b91859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505061175a565b6040516001600160a01b0384811660248301528381166044830152606482018390526108049186918216906323b872dd90608401611670565b6001546001600160a01b03163314610b565760405163118cdaa760e01b815233600482015260240161051f565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080602060008451602086016000885af18061177d576040513d6000823e3d81fd5b50506000513d915081156117955780600114156117a2565b6001600160a01b0384163b155b1561080457604051635274afe760e01b81526001600160a01b038516600482015260240161051f565b6000602082840312156117dd57600080fd5b5035919050565b600080602083850312156117f757600080fd5b823567ffffffffffffffff81111561180e57600080fd5b8301601f8101851361181f57600080fd5b803567ffffffffffffffff81111561183657600080fd5b85602082840101111561184857600080fd5b6020919091019590945092505050565b8215158152604060208201526000825180604084015260005b8181101561188e5760208186018101516060868401015201611871565b506000606082850101526060601f19601f8301168401019150509392505050565b600080604083850312156118c257600080fd5b50508035926020909101359150565b6000806000606084860312156118e657600080fd5b505081359360208301359350604090920135919050565b60006020828403121561190f57600080fd5b81356001600160a01b038116811461135857600080fd5b6020808252818101527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f604082015260600190565b634e487b7160e01b600052601160045260246000fd5b808201808211156119845761198461195b565b92915050565b818103818111156119845761198461195b565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156119c557600080fd5b813567ffffffffffffffff8111156119dc57600080fd5b8201601f810184136119ed57600080fd5b803567ffffffffffffffff811115611a0757611a0761199d565b8060051b604051601f19603f830116810181811067ffffffffffffffff82111715611a3457611a3461199d565b604052918252602081840181019290810187841115611a5257600080fd5b6020850194505b83851015611a7557843580825260209586019590935001611a59565b509695505050505050565b634e487b7160e01b600052603260045260246000fd5b805169ffffffffffffffffffff811681146109bd57600080fd5b600080600080600060a08688031215611ac857600080fd5b611ad186611a96565b60208701516040880151606089015192975090955093509150611af660808701611a96565b90509295509295909350565b600060018201611b1457611b1461195b565b5060010190565b602080825282518282018190526000918401906040840190835b81811015611b53578351835260209384019390920191600101611b35565b509095945050505050565b80820281158282048414176119845761198461195b565b600082611b9257634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220c923e6d1009f666b61151b97e844c3888493c3ad04aa992206bf85b2bcea4a0764736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101fb5760003560e01c80638d404e821161011a578063bb822981116100ad578063e1ec3c681161007c578063e1ec3c6814610403578063ed80c850146104c9578063f131203a146104d2578063f2fde38b146104db578063f7681ddd146104ee57600080fd5b8063bb822981146103bc578063bc174d36146103c5578063ccdd9f5d146103e8578063d81d4484146103fb57600080fd5b8063a85b7715116100e9578063a85b77151461036d578063b40db21214610376578063b5af306214610389578063b6b55f25146103a957600080fd5b80638d404e82146103235780638da5cb5b14610336578063904b513b14610347578063a57475e01461035a57600080fd5b8063615737ef11610192578063715018a611610161578063715018a6146102ec5780637992ec48146102f457806387c51459146103075780638a700b531461031057600080fd5b8063615737ef1461028557806361a2ac39146102b057806364b60700146102c35780636e04ff0d146102cb57600080fd5b80634585e33b116101ce5780634585e33b1461024357806351c6590a146102565780635e318e0714610269578063608526341461027c57600080fd5b80630a22d68c146102005780632e1a7d4d1461021c57806335d1e920146102315780634031234c1461023a575b600080fd5b61020960105481565b6040519081526020015b60405180910390f35b61022f61022a3660046117cb565b6104f7565b005b610209600d5481565b61020960065481565b61022f6102513660046117e4565b610701565b61022f6102643660046117cb565b61080b565b61022f6102773660046117cb565b61085d565b61020960085481565b600354610298906001600160a01b031681565b6040516001600160a01b039091168152602001610213565b600254610298906001600160a01b031681565b61020961090a565b6102de6102d93660046117e4565b6109c2565b604051610213929190611858565b61022f610b44565b61022f6103023660046117cb565b610b58565b610209600b5481565b61022f61031e3660046118af565b610c6a565b600454610298906001600160a01b031681565b6001546001600160a01b0316610298565b61022f6103553660046118d1565b610e33565b6102096103683660046117cb565b611290565b61020960075481565b6102096103843660046117cb565b611332565b6102096103973660046118fd565b600c6020526000908152604090205481565b61022f6103b73660046117cb565b61135f565b61020960095481565b6103d86103d33660046117cb565b61141b565b6040519015158152602001610213565b61022f6103f63660046117cb565b6114ad565b610209606481565b6104736104113660046117cb565b600a6020526000908152604090208054600182015460028301546003840154600485015460058601546006870154600788015460089098015496976001600160a01b03909616969495939492939192909160ff8082169261010090920416908a565b604080519a8b526001600160a01b0390991660208b0152978901969096526060880194909452608087019290925260a086015260c0850152151560e0840152151561010083015261012082015261014001610213565b610209600e5481565b610209600f5481565b61022f6104e93660046118fd565b6115de565b61020960055481565b6104ff611619565b600081116105285760405162461bcd60e51b815260040161051f90611926565b60405180910390fd5b336000908152600c602052604090205481111561057e5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b604482015260640161051f565b6000805b600b548110156105f2576000818152600a60205260409020600101546001600160a01b0316331480156105c657506000818152600a602052604090206007015460ff165b156105ea576000818152600a60205260409020600201546105e79083611971565b91505b600101610582565b50336000908152600c6020526040902054829061061090839061198a565b101561066a5760405162461bcd60e51b8152602060048201526024808201527f436f6c6c61746572616c206973206c6f636b656420696e20616374697665206c6044820152636f616e7360e01b606482015260840161051f565b336000908152600c60205260408120805484929061068990849061198a565b9250508190555081600d60008282546106a2919061198a565b90915550506002546106be906001600160a01b03163384611643565b60405182815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a2506106fe6001600055565b50565b8015610807576000610715828401846119b3565b905060005b815181101561080457600082828151811061073757610737611a80565b6020026020010151905061074a8161141b565b156107fb576000818152600a60205260409020600781015460ff16801561077b57506007810154610100900460ff16155b156107f95760078101805461ffff19166101001790556003810154600e80546000906107a890849061198a565b90915550506001810154600282015460405190815230916001600160a01b03169084907fe4b3cb24da49cbaa1989989a720518b9c8c12f4a6e0d848853745d9271104b0f9060200160405180910390a45b505b5060010161071a565b50505b5050565b6000811161082b5760405162461bcd60e51b815260040161051f90611926565b600354610843906001600160a01b03163330846116a2565b80600f60008282546108559190611971565b909155505050565b6108656116db565b6010548111156108b75760405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e74206665652062616c616e63650000000000000000604482015260640161051f565b80601060008282546108c9919061198a565b9250508190555080600f60008282546108e2919061198a565b90915550506001546106fe906001600160a01b03166003546001600160a01b03169083611643565b6004805460408051633fabe5a360e21b8152905160009384936001600160a01b03169263feaf968c928183019260a0928290030181865afa158015610953573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109779190611ab0565b505050915050600081136109bd5760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420707269636560981b604482015260640161051f565b919050565b600060606000600b5467ffffffffffffffff8111156109e3576109e361199d565b604051908082528060200260200182016040528015610a0c578160200160208202803683370190505b5090506000805b600b54811015610a5f57610a268161141b565b15610a575780838381518110610a3e57610a3e611a80565b602090810291909101015281610a5381611b02565b9250505b600101610a13565b508015610b24576001935060008167ffffffffffffffff811115610a8557610a8561199d565b604051908082528060200260200182016040528015610aae578160200160208202803683370190505b50905060005b82811015610afb57838181518110610ace57610ace611a80565b6020026020010151828281518110610ae857610ae8611a80565b6020908102919091010152600101610ab4565b5080604051602001610b0d9190611b1b565b604051602081830303815290604052935050610b3b565b600093506040518060200160405280600081525092505b50509250929050565b610b4c6116db565b610b566000611708565b565b610b606116db565b60648111610bc35760405162461bcd60e51b815260206004820152602a60248201527f436f6c6c61746572616c20726174696f206d7573742062652067726561746572604482015269207468616e203130302560b01b606482015260840161051f565b61012c811115610c255760405162461bcd60e51b815260206004820152602760248201527f436f6c6c61746572616c20726174696f206d757374206265206c657373207468604482015266616e203330302560c81b606482015260840161051f565b600580549082905560408051828152602081018490527fea851fc89ebccda62380b76fc8e8317f0bcd4d75ea908cf501bd2ebc6ac1c8f2910160405180910390a15050565b610c72611619565b6000828152600a60205260409020600781015460ff16610cc95760405162461bcd60e51b81526020600482015260126024820152714c6f616e206973206e6f742061637469766560701b604482015260640161051f565b60018101546001600160a01b03163314610d185760405162461bcd60e51b815260206004820152601060248201526f2737ba103a3432903137b93937bbb2b960811b604482015260640161051f565b6000610d2384611290565b90506000818360030154610d379190611971565b905080841015610d895760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e742072657061796d656e7420616d6f756e74000000604482015260640161051f565b600354610da1906001600160a01b03163330876116a2565b60078301805460ff19169055426008840155600f8054859190600090610dc8908490611971565b90915550506003830154600e8054600090610de490849061198a565b90915550506040805185815260208101849052339187917f553c9087bff5b534e499a66dac3fa9db2962cd252ea01165239755836ae5345e910160405180910390a35050506108076001600055565b610e3b611619565b60008311610e975760405162461bcd60e51b8152602060048201526024808201527f436f6c6c61746572616c206d7573742062652067726561746572207468616e206044820152637a65726f60e01b606482015260840161051f565b60008211610ef55760405162461bcd60e51b815260206004820152602560248201527f4c6f616e20616d6f756e74206d7573742062652067726561746572207468616e604482015264207a65726f60d81b606482015260840161051f565b600081118015610f0757506008548111155b610f4b5760405162461bcd60e51b815260206004820152601560248201527424b73b30b634b2103637b0b710323ab930ba34b7b760591b604482015260640161051f565b336000908152600c6020526040902054831115610faa5760405162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e7420636f6c6c61746572616c2062616c616e636500604482015260640161051f565b6000610fb584611332565b90506000600554606483610fc99190611b5e565b610fd39190611b75565b9050808411156110315760405162461bcd60e51b8152602060048201526024808201527f4c6f616e20616d6f756e74206578636565647320636f6c6c61746572616c20726044820152636174696f60e01b606482015260840161051f565b83600f5410156110835760405162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e7420706c6174666f726d206c697175696469747900604482015260640161051f565b60006064600754866110959190611b5e565b61109f9190611b75565b905060006110ad828761198a565b600b805491925060009190826110c283611b02565b919050559050604051806101400160405280828152602001336001600160a01b03168152602001898152602001888152602001428152602001876201518061110a9190611b5e565b6111149042611971565b8152600954602080830191909152600160408084018290526000606080860182905242608096870152878252600a8552828220875181559487015193850180546001600160a01b039095166001600160a01b03199095169490941790935590850151600284015590840151600383015591830151600482015560a0830151600582015560c0830151600682015560e08301516007820180546101008087015115150261ff00199315159390931661ffff199091161791909117905561012090920151600890920191909155600f80548992906111f190849061198a565b9250508190555086600e600082825461120a9190611971565b9250508190555082601060008282546112239190611971565b909155505060035461123f906001600160a01b03163384611643565b6040805189815260208101849052339183917f3373919ad665425d2cddb4072830e5935b6ee308440fa99b23383648da473bc0910160405180910390a3505050505061128b6001600055565b505050565b6000818152600a60205260408120600781015460ff166112e75760405162461bcd60e51b81526020600482015260126024820152714c6f616e206973206e6f742061637469766560701b604482015260640161051f565b60008160080154426112f9919061198a565b905064496cebb80081836006015484600301546113169190611b5e565b6113209190611b5e565b61132a9190611b75565b949350505050565b60008061133d61090a565b90506305f5e10061134e8285611b5e565b6113589190611b75565b9392505050565b611367611619565b600081116113875760405162461bcd60e51b815260040161051f90611926565b60025461139f906001600160a01b03163330846116a2565b336000908152600c6020526040812080548392906113be908490611971565b9250508190555080600d60008282546113d79190611971565b909155505060405181815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a26106fe6001600055565b6000818152600a60205260408120600781015460ff16158061144657506007810154610100900460ff165b156114545750600092915050565b60006114638260020154611332565b9050600061147085611290565b905060008184600301546114849190611971565b9050600081611494606486611b5e565b61149e9190611b75565b60065411979650505050505050565b6114b5611619565b6114be8161141b565b6115165760405162461bcd60e51b8152602060048201526024808201527f4c6f616e206973206e6f7420656c696769626c6520666f72206c6971756964616044820152633a34b7b760e11b606482015260840161051f565b6000818152600a602052604081209061152e83611290565b905060008183600301546115429190611971565b905060006115538460020154611332565b60078501805461ffff19166101001790556003850154600e8054929350909160009061158090849061198a565b90915550506001840154600285015460405190815233916001600160a01b03169087907fe4b3cb24da49cbaa1989989a720518b9c8c12f4a6e0d848853745d9271104b0f9060200160405180910390a4505050506106fe6001600055565b6115e66116db565b6001600160a01b03811661161057604051631e4fbdf760e01b81526000600482015260240161051f565b6106fe81611708565b60026000540361163c57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6040516001600160a01b0383811660248301526044820183905261128b91859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505061175a565b6040516001600160a01b0384811660248301528381166044830152606482018390526108049186918216906323b872dd90608401611670565b6001546001600160a01b03163314610b565760405163118cdaa760e01b815233600482015260240161051f565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080602060008451602086016000885af18061177d576040513d6000823e3d81fd5b50506000513d915081156117955780600114156117a2565b6001600160a01b0384163b155b1561080457604051635274afe760e01b81526001600160a01b038516600482015260240161051f565b6000602082840312156117dd57600080fd5b5035919050565b600080602083850312156117f757600080fd5b823567ffffffffffffffff81111561180e57600080fd5b8301601f8101851361181f57600080fd5b803567ffffffffffffffff81111561183657600080fd5b85602082840101111561184857600080fd5b6020919091019590945092505050565b8215158152604060208201526000825180604084015260005b8181101561188e5760208186018101516060868401015201611871565b506000606082850101526060601f19601f8301168401019150509392505050565b600080604083850312156118c257600080fd5b50508035926020909101359150565b6000806000606084860312156118e657600080fd5b505081359360208301359350604090920135919050565b60006020828403121561190f57600080fd5b81356001600160a01b038116811461135857600080fd5b6020808252818101527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f604082015260600190565b634e487b7160e01b600052601160045260246000fd5b808201808211156119845761198461195b565b92915050565b818103818111156119845761198461195b565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156119c557600080fd5b813567ffffffffffffffff8111156119dc57600080fd5b8201601f810184136119ed57600080fd5b803567ffffffffffffffff811115611a0757611a0761199d565b8060051b604051601f19603f830116810181811067ffffffffffffffff82111715611a3457611a3461199d565b604052918252602081840181019290810187841115611a5257600080fd5b6020850194505b83851015611a7557843580825260209586019590935001611a59565b509695505050505050565b634e487b7160e01b600052603260045260246000fd5b805169ffffffffffffffffffff811681146109bd57600080fd5b600080600080600060a08688031215611ac857600080fd5b611ad186611a96565b60208701516040880151606089015192975090955093509150611af660808701611a96565b90509295509295909350565b600060018201611b1457611b1461195b565b5060010190565b602080825282518282018190526000918401906040840190835b81811015611b53578351835260209384019390920191600101611b35565b509095945050505050565b80820281158282048414176119845761198461195b565b600082611b9257634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220c923e6d1009f666b61151b97e844c3888493c3ad04aa992206bf85b2bcea4a0764736f6c634300081c0033",
  "devdoc": {
    "details": "A DeFi platform that allows users to deposit WBTC as collateral and take loans in stablecoins Integrates Chainlink Price Feeds for accurate collateral valuation Uses Chainlink Automation for liquidation checks",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addLiquidity(uint256)": {
        "details": "Add liquidity to the platform's stablecoin balance",
        "params": {
          "amount": "Amount of stablecoin to add"
        }
      },
      "calculateInterest(uint256)": {
        "details": "Calculate interest accrued on a loan",
        "params": {
          "loanId": "ID of the loan"
        },
        "returns": {
          "_0": "Interest amount in stablecoin"
        }
      },
      "calculateUsdValue(uint256)": {
        "details": "Calculate the USD value of WBTC",
        "params": {
          "wbtcAmount": "Amount of WBTC (in wei)"
        },
        "returns": {
          "_0": "USD value with 8 decimal places"
        }
      },
      "checkUpkeep(bytes)": {
        "details": "Implementation for Chainlink Automation Checks if any loans need liquidation"
      },
      "constructor": {
        "params": {
          "_btcUsdPriceFeed": "Address of the Chainlink BTC/USD price feed",
          "_stablecoinAddress": "Address of the stablecoin used for loans",
          "_wbtcAddress": "Address of the WBTC token"
        }
      },
      "createLoan(uint256,uint256,uint256)": {
        "details": "Create a new loan backed by WBTC collateral",
        "params": {
          "collateralAmount": "Amount of WBTC to use as collateral (in wei)",
          "durationDays": "Duration of the loan in days",
          "loanAmount": "Amount of stablecoin to borrow"
        }
      },
      "deposit(uint256)": {
        "details": "Deposit WBTC as collateral",
        "params": {
          "amount": "Amount of WBTC to deposit (in wei)"
        }
      },
      "getBtcUsdPrice()": {
        "details": "Get the latest BTC/USD price from Chainlink",
        "returns": {
          "_0": "price in USD with 8 decimals"
        }
      },
      "liquidateLoan(uint256)": {
        "details": "Liquidate an undercollateralized loan",
        "params": {
          "loanId": "ID of the loan to liquidate"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "performUpkeep(bytes)": {
        "details": "Implementation for Chainlink Automation Liquidates loans that need liquidation"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "repayLoan(uint256,uint256)": {
        "details": "Repay a loan and retrieve collateral",
        "params": {
          "loanId": "ID of the loan to repay",
          "repaymentAmount": "Amount of stablecoin to repay"
        }
      },
      "shouldLiquidate(uint256)": {
        "details": "Check if a loan needs liquidation based on current BTC/USD price",
        "params": {
          "loanId": "ID of the loan to check"
        },
        "returns": {
          "_0": "true if loan should be liquidated"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateCollateralRatio(uint256)": {
        "details": "Update the required collateral ratio",
        "params": {
          "newRatio": "New collateral ratio (e.g., 150 for 150%)"
        }
      },
      "withdraw(uint256)": {
        "details": "Withdraw WBTC collateral if not being used for active loans",
        "params": {
          "amount": "Amount of WBTC to withdraw (in wei)"
        }
      },
      "withdrawFees(uint256)": {
        "details": "Withdraw platform fees (owner only)",
        "params": {
          "amount": "Amount to withdraw"
        }
      }
    },
    "title": "BitPesa WBTC Lending Platform",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1221,
        "contract": "contracts/BitPesaLending.sol:BitPesaLending",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 409,
        "contract": "contracts/BitPesaLending.sol:BitPesaLending",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1312,
        "contract": "contracts/BitPesaLending.sol:BitPesaLending",
        "label": "wbtcAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1314,
        "contract": "contracts/BitPesaLending.sol:BitPesaLending",
        "label": "stablecoinAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1317,
        "contract": "contracts/BitPesaLending.sol:BitPesaLending",
        "label": "btcUsdPriceFeed",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(AggregatorV3Interface)305"
      },
      {
        "astId": 1323,
        "contract": "contracts/BitPesaLending.sol:BitPesaLending",
        "label": "requiredCollateralRatio",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1326,
        "contract": "contracts/BitPesaLending.sol:BitPesaLending",
        "label": "liquidationThreshold",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1329,
        "contract": "contracts/BitPesaLending.sol:BitPesaLending",
        "label": "borrowFeePercent",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1332,
        "contract": "contracts/BitPesaLending.sol:BitPesaLending",
        "label": "maxLoanDurationDays",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1335,
        "contract": "contracts/BitPesaLending.sol:BitPesaLending",
        "label": "interestRatePerYear",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1361,
        "contract": "contracts/BitPesaLending.sol:BitPesaLending",
        "label": "loans",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(Loan)1356_storage)"
      },
      {
        "astId": 1363,
        "contract": "contracts/BitPesaLending.sol:BitPesaLending",
        "label": "nextLoanId",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1367,
        "contract": "contracts/BitPesaLending.sol:BitPesaLending",
        "label": "userCollateralBalance",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1369,
        "contract": "contracts/BitPesaLending.sol:BitPesaLending",
        "label": "totalCollateralLocked",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1371,
        "contract": "contracts/BitPesaLending.sol:BitPesaLending",
        "label": "totalLoansOutstanding",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 1373,
        "contract": "contracts/BitPesaLending.sol:BitPesaLending",
        "label": "platformStablecoinBalance",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 1375,
        "contract": "contracts/BitPesaLending.sol:BitPesaLending",
        "label": "protocolFeeBalance",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)305": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Loan)1356_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BitPesaLending.Loan)",
        "numberOfBytes": "32",
        "value": "t_struct(Loan)1356_storage"
      },
      "t_struct(Loan)1356_storage": {
        "encoding": "inplace",
        "label": "struct BitPesaLending.Loan",
        "members": [
          {
            "astId": 1337,
            "contract": "contracts/BitPesaLending.sol:BitPesaLending",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1339,
            "contract": "contracts/BitPesaLending.sol:BitPesaLending",
            "label": "borrower",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1341,
            "contract": "contracts/BitPesaLending.sol:BitPesaLending",
            "label": "collateralAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1343,
            "contract": "contracts/BitPesaLending.sol:BitPesaLending",
            "label": "loanAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1345,
            "contract": "contracts/BitPesaLending.sol:BitPesaLending",
            "label": "startTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1347,
            "contract": "contracts/BitPesaLending.sol:BitPesaLending",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1349,
            "contract": "contracts/BitPesaLending.sol:BitPesaLending",
            "label": "interestRate",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1351,
            "contract": "contracts/BitPesaLending.sol:BitPesaLending",
            "label": "active",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 1353,
            "contract": "contracts/BitPesaLending.sol:BitPesaLending",
            "label": "liquidated",
            "offset": 1,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 1355,
            "contract": "contracts/BitPesaLending.sol:BitPesaLending",
            "label": "lastInterestCalculation",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}